{"version":3,"sources":["modules/MakeGraph.ts","redux/shortestpath.ts","redux/graph.ts","components/atoms/TextArea.tsx","components/atoms/Toggle.tsx","components/atoms/Input.tsx","redux/direct.ts","modules/Dijkstra.ts","components/molecules/Config.tsx","components/templates/Aside.tsx","components/templates/Header.tsx","components/atoms/Node.tsx","components/atoms/Edge.tsx","modules/CoordCalculator.ts","components/molecules/Main.tsx","App.tsx","reportWebVitals.js","redux/index.ts","index.js"],"names":["makeGraph","graph","reduce","acc","ele","dix","split","vertex1","vertex2","cost","undefined","push","SETSHORTESTPATH","initialState","from","to","path","setShortestPath","diff","type","payload","SETGRAPHINFO","vertexCount","edgeCount","Textarea","dispatch","useDispatch","useState","value","setValue","style","resize","onChange","e","ng","inputValue","target","edgecnt","isNaN","Number","splice","debounceIDinputCheck","prev","Toggle","className","Input","text","name","fontSize","width","height","SETDIRECT","directed","INF","Math","floor","MAX_SAFE_INTEGER","Dijkstra","builder","initGraph","this","getGraphInfo","getFromVertex","getToVertex","mapping","isExistVertex","backtracking","dijkstra","Object","entries","forEach","currentVertex","isExceedVertexCount","length","ele2","nextVertex","keys","includes","dist","pq","PriorityQueue","comparator","a","b","queue","peek","curVertex","dequeue","tmpcost","nextCost","ret","x","edg","DijkstraBuilder","graphInfo","LabelStyle","margin","Config","inputList","setInputList","useSelector","state","checked","onClick","setGraphInfo","setFromVertex","setToVertex","build","run","window","open","cursor","alt","src","Aside","Header","Node","size","onPointerDown","onPointerUp","onPointerMove","color","y","cy","cx","r","fill","stroke","strokeWidth","dy","textAnchor","Edge","direct","fromY","fromX","toY","toX","maxY","max","maxX","minY","min","minX","gap","calculCostCoord","costY","costX","coord","arrowMark","id","viewBox","refX","refY","markerWidth","markerHeight","orient","d","markerEnd","dx","Point","CoordCalculator","leftTop","rightBottom","nodeCoord","getLeftTop","getRightBottom","BinarySpacePartitioning","extractNodeCoordList","extractVertex","depth","randomY","random","randomX","axis","ratio","cnt","idx","init","connectedList","vertexList","key","shift","connect","vele","CoordCalculatorBuilder","pt","BOARDSIZE","outofRange","Main","ref","useRef","setSize","vertexInfo","setVertexInfo","dragActive","setdragActive","shortestPath","useEffect","current","offsetWidth","offsetHeight","coordCalculator","setLeftTop","setRightBottom","handlePointerDown","handlePointerUp","handlePointerMove","debounce","data","vertex","movementX","movementY","nodeList","map","edgeList","idx1","self","p1","connectedVertex","idx2","p2","isShortestEdge","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","action","store","createStore","rootReducer","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b6d52dd.chunk.js","sourcesContent":["interface EdgeInfo {\r\n  [key: string]: string[][];\r\n};\r\n\r\nconst makeGraph = (graph: string[]) => {\r\n\r\n  return graph.reduce((acc: EdgeInfo, ele, dix): EdgeInfo => {\r\n    \r\n    const [vertex1, vertex2, cost] = ele.split(' ');\r\n\r\n    if(vertex1 === '')\r\n      return acc;\r\n\r\n    acc[vertex1] = acc[vertex1] || [];\r\n\r\n    if (vertex2 === undefined && cost === undefined) {\r\n      return acc;\r\n    }\r\n    \r\n    acc[vertex1].push([vertex2, cost]);\r\n\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\nexport default makeGraph;","export const SETSHORTESTPATH = 'SETSHORTESTPATH' as const;\r\n\r\nexport interface ShortestPathState {\r\n  from : string;\r\n  to: string;\r\n  path: { [key: string]: boolean };\r\n}\r\n\r\ninterface Action {\r\n  type: string;\r\n  payload: ShortestPathState;\r\n}\r\n\r\nexport const initialState: ShortestPathState = {\r\n  from: '',\r\n  to: '',\r\n  path: {}\r\n};\r\n\r\n// action creator\r\nexport const setShortestPath = (diff: ShortestPathState) => ({\r\n  type: SETSHORTESTPATH,\r\n  payload: diff\r\n});\r\n\r\n// 리듀서\r\nexport default function shortestPathReducer(state: ShortestPathState = initialState, action: Action): ShortestPathState {\r\n  switch (action.type) {\r\n    case SETSHORTESTPATH:\r\n      return {\r\n        ...state,\r\n        from : action.payload.from,\r\n        to : action.payload.to,\r\n        path: action.payload.path\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","export const SETGRAPHINFO = 'SETGRAPHINFO' as const;\r\n\r\nexport interface Graph {\r\n  vertexCount: string;\r\n  edgeCount: string;\r\n  graph: { [key: string]: string[][] };\r\n}\r\n\r\nexport interface GraphState {\r\n  graph: Graph;\r\n};\r\n\r\ninterface Action {\r\n  type: string;\r\n  payload: Graph;\r\n}\r\n\r\nconst initialState: GraphState = {\r\n  graph: {\r\n    vertexCount: '0',\r\n    edgeCount: '',\r\n    graph: {}\r\n  }\r\n};\r\n\r\n// action creator\r\nexport const setGraphInfo = (diff: Graph) => ({\r\n  type: SETGRAPHINFO,\r\n  payload: diff\r\n});\r\n\r\n// 리듀서\r\nexport default function graphReducer(state: GraphState = initialState, action: Action): GraphState {\r\n  switch (action.type) {\r\n    case SETGRAPHINFO:\r\n      return {\r\n        ...state,\r\n        graph: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, { useState } from \"react\";\r\nimport makeGraph from '../../modules/MakeGraph';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setShortestPath, initialState } from '../../redux/shortestpath';\r\nimport { setGraphInfo, Graph } from '../../redux/graph';\r\n\r\nconst debounceIDinputCheck = (e: React.ChangeEvent<HTMLTextAreaElement>): Graph | undefined => {\r\n\r\n  const inputValue: string[] = e.target.value.split('\\n');\r\n  const [vertexCount, edgecnt]: string[] = inputValue[0].split(\" \");\r\n\r\n  if (isNaN(Number(vertexCount)) === true && isNaN(Number(edgecnt)) === true) {\r\n    return undefined;\r\n  }\r\n\r\n  const graph = makeGraph(inputValue.splice(1));\r\n\r\n  return {\r\n    vertexCount: vertexCount,\r\n    edgeCount: edgecnt,\r\n    graph: graph\r\n  };\r\n}\r\n\r\nconst Textarea = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const [value, setValue] = useState<string>('');\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n\r\n    const ng: Graph | undefined = debounceIDinputCheck(e);\r\n    if (ng !== undefined) {\r\n      dispatch(setGraphInfo(ng as Graph));\r\n      dispatch(setShortestPath(initialState));\r\n    }\r\n\r\n    setValue(prev => e.target.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <textarea style={{ resize: 'none' }} value={value} onChange={handleChange}></textarea>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Textarea;","import React from \"react\";\r\n\r\ninterface ToggleProps {\r\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\r\n}\r\n\r\nconst Toggle = ({ onChange }: ToggleProps) => {\r\n\r\n  return (\r\n    <>\r\n      <label className='direct-button'>\r\n        <input type='checkbox' onChange={onChange}/>\r\n        <span className='onoff-switch' />\r\n      </label>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Toggle;","interface InputProps {\r\n  text: string;\r\n  name: string;\r\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\r\n  value: string;\r\n  width?: string;\r\n}\r\n\r\nconst Input = ({ text, name, onChange, value }: InputProps) => {\r\n\r\n  return (\r\n    <>\r\n      <label style={{ fontSize: '13px' }}> {text} </label>\r\n      <input type='text' name={name} onChange={onChange} value={value} style={{ width: '40px', height: '25px' }}>\r\n      </input>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Input;","export const SETDIRECT = 'SETDIRECT' as const;\r\n\r\nexport interface DirectState {\r\n  directed: boolean;\r\n}\r\n\r\ninterface Action {\r\n  type: string;\r\n  payload: boolean;\r\n}\r\n\r\nconst initialState: DirectState = {\r\n  directed: false\r\n};\r\n\r\n// action creator\r\nexport const setDirected = (diff: boolean) => ({\r\n  type: SETDIRECT,\r\n  payload: diff\r\n});\r\n\r\n// 리듀서\r\nexport default function directReducer(state: DirectState = initialState, action: Action): DirectState {\r\n  switch (action.type) {\r\n    case SETDIRECT:\r\n      return {\r\n        ...state,\r\n        directed : action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { Graph } from '../redux/graph';\r\nimport PriorityQueue from 'ts-priority-queue';\r\n\r\ninterface EdgeInfo {\r\n  [key: string]: { [key: string]: string };\r\n}\r\n\r\ntype Pair = [number, string];\r\n\r\nconst INF = Math.floor(Number.MAX_SAFE_INTEGER / 987);\r\n\r\nexport class Dijkstra {\r\n\r\n  private initGraph: Graph;\r\n  private from: string;\r\n  private to: string;\r\n  private graph: EdgeInfo = {};\r\n  private vertexCount: number = 0;\r\n\r\n  constructor(builder: DijkstraBuilder) {\r\n\r\n    this.initGraph = builder.getGraphInfo();\r\n    this.from = builder.getFromVertex();\r\n    this.to = builder.getToVertex();\r\n    this.vertexCount = Number(this.initGraph.vertexCount);\r\n  }\r\n\r\n  public run() {\r\n\r\n    this.mapping();\r\n\r\n    if (this.isExistVertex() === false)\r\n      return false;\r\n\r\n    return this.backtracking(this.dijkstra());\r\n  }\r\n\r\n  public mapping() {\r\n\r\n    Object.entries(this.initGraph.graph).forEach(ele => {\r\n\r\n      const [currentVertex, value] = ele;\r\n\r\n      if (this.isExceedVertexCount(this.graph) && value.length <= 0)\r\n        return;\r\n\r\n      this.graph[currentVertex] = this.graph[currentVertex] || {};\r\n\r\n      value.forEach(ele2 => {\r\n\r\n        const [nextVertex, cost] = ele2;\r\n        if (nextVertex === undefined && cost === undefined)\r\n          return;\r\n\r\n        if (this.isExceedVertexCount(this.graph) && !this.graph[nextVertex])\r\n          return;\r\n\r\n        this.graph[nextVertex] = this.graph[nextVertex] || {};\r\n\r\n        // 현재 정점과 연결된 정점 객체가 존재하지 않는다면\r\n        if (Object.keys(this.graph[currentVertex]).includes(nextVertex) === false) {\r\n          this.graph[currentVertex][nextVertex] = cost;\r\n        }\r\n        // 양방향으로 연결한다.\r\n        if (Object.keys(this.graph[nextVertex]).includes(currentVertex) === false) {\r\n          this.graph[nextVertex][currentVertex] = cost;\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  public dijkstra() {\r\n\r\n    const dist: { [key: string]: number } = {};\r\n    const path: { [key: string]: string } = {};\r\n\r\n    Object.keys(this.graph).forEach(ele => {\r\n      dist[ele] = dist[ele] || INF\r\n      path[ele] = path[ele] || ele;\r\n    });\r\n\r\n    dist[this.from] = 0;\r\n\r\n    const pq = new PriorityQueue({ comparator: (a: Pair, b: Pair) => a[0] - b[0] });\r\n    pq.queue([0, this.from]);\r\n\r\n    while (pq.length) {\r\n\r\n      const [cost, curVertex] = pq.peek();\r\n      pq.dequeue();\r\n\r\n      if (dist[curVertex] < cost)\r\n        continue;\r\n\r\n      Object.entries(this.graph[curVertex]).forEach(ele => {\r\n\r\n        const [nextVertex, tmpcost] = ele;\r\n        const nextCost = Number(tmpcost) + cost;\r\n\r\n        if (nextCost < dist[nextVertex]) {\r\n          path[nextVertex] = curVertex;\r\n          dist[nextVertex] = nextCost;\r\n          pq.queue([nextCost, nextVertex]);\r\n        }\r\n      });\r\n    }\r\n    return path;\r\n  }\r\n\r\n  // 최단경로 역추적\r\n  public backtracking(path: { [key: string]: string }) {\r\n\r\n    const ret: { [key: string]: boolean } = {};\r\n    let x = this.to;\r\n\r\n    while (x !== path[x]) {\r\n      ret[x] = ret[x] || false;\r\n      x = path[x];\r\n    }\r\n\r\n    ret[x] = ret[x] || false;\r\n    ret[this.to] = true;\r\n    ret[this.from] = true;\r\n    \r\n    return ret;\r\n  }\r\n\r\n  // from to 정점이 하나라도 없다면\r\n  public isExistVertex() {\r\n    return Object.keys(this.graph).includes(this.from) && Object.keys(this.graph).includes(this.to);\r\n  }\r\n\r\n  // 객체 키값 개수가 정점 개수를 초과하는가?\r\n  public isExceedVertexCount(edg: EdgeInfo) {\r\n    return Object.keys(this.graph).length >= this.vertexCount;\r\n  }\r\n}\r\n\r\n\r\nexport class DijkstraBuilder {\r\n\r\n  private graphInfo: Graph;\r\n  private from: string;\r\n  private to: string;\r\n\r\n  public setGraphInfo(graphInfo: Graph) {\r\n    this.graphInfo = graphInfo;\r\n    return this;\r\n  }\r\n\r\n  public setFromVertex(from: string) {\r\n    this.from = from;\r\n    return this;\r\n  }\r\n\r\n  public setToVertex(to: string) {\r\n    this.to = to;\r\n    return this;\r\n  }\r\n\r\n  public getGraphInfo() {\r\n    return this.graphInfo;\r\n  }\r\n\r\n  public getFromVertex() {\r\n    return this.from;\r\n  }\r\n\r\n  public getToVertex() {\r\n    return this.to;\r\n  }\r\n\r\n  public build() {\r\n    return new Dijkstra(this);\r\n  }\r\n}","import Toggle from '../atoms/Toggle';\r\nimport Input from '../atoms/Input';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setDirected } from '../../redux/direct';\r\nimport { setShortestPath } from '../../redux/shortestpath';\r\nimport React, { useState } from 'react';\r\nimport { Dijkstra, DijkstraBuilder } from '../../modules/Dijkstra';\r\nimport { RootState } from '../../redux/index';\r\n\r\nconst LabelStyle = {\r\n  margin: '12px',\r\n  fontSize: '15px',\r\n}\r\n\r\ntype changeEventInput = React.ChangeEvent<HTMLInputElement>;\r\n\r\ninterface InputList {\r\n  from: string;\r\n  to: string;\r\n};\r\n\r\nconst Config = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const [inputList, setInputList] = useState<InputList>({\r\n    from: '',\r\n    to: '',\r\n  });\r\n  const { graphInfo } = useSelector((state: RootState) => ({\r\n    graphInfo: state.graph.graph\r\n  }));\r\n\r\n  const toggleOnChange = (e: changeEventInput) => dispatch(setDirected(e.target.checked));\r\n\r\n  const run = () => {\r\n\r\n    const dijkstra: Dijkstra = new DijkstraBuilder()\r\n      .setGraphInfo(graphInfo)\r\n      .setFromVertex(inputList.from)\r\n      .setToVertex(inputList.to)\r\n      .build();\r\n\r\n    const ret = dijkstra.run();\r\n\r\n    if (ret !== false) {\r\n      dispatch(setShortestPath({\r\n        from: inputList.from,\r\n        to: inputList.to,\r\n        path: ret\r\n      }));\r\n    }\r\n  }\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n    const { name, value } = e.target;\r\n\r\n    if (name === 'path-from') {\r\n      setInputList(prev => ({\r\n        ...prev,\r\n        from: value,\r\n      }))\r\n\r\n    } else {\r\n      setInputList(prev => ({\r\n        ...prev,\r\n        to: value,\r\n      }))\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className='config'>\r\n        <label style={LabelStyle}>Undirected : Directed</label>\r\n        <Toggle onChange={toggleOnChange} />\r\n        <label style={LabelStyle}>Shortest Path Find</label>\r\n        <div>\r\n          <Input text='from' name='path-from' onChange={onChange} value={inputList.from} />\r\n          <Input text='to' name='path-to' onChange={onChange} value={inputList.to} />\r\n        </div>\r\n        <button onClick={run}>Find</button>\r\n        <img\r\n          onClick={() => window.open('https://github.com/dkpark10/graphpainter', '_blank')}\r\n          style={{ width: '45px', height: '45px', cursor: 'pointer' }}\r\n          alt='my github'\r\n          src='https://media.cdnandroid.com/item_images/1097581/imagen-github-0thumb.jpeg'>\r\n        </img>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Config;\r\n","import React from \"react\";\r\nimport Textarea from '../atoms/TextArea';\r\nimport Config from '../molecules/Config';\r\nimport { debounce, throttle } from 'lodash';\r\n\r\nconst Aside = () => {\r\n\r\n  return (\r\n    <>\r\n      <aside>\r\n        <Textarea />\r\n        <Config />\r\n      </aside>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Aside;","const Header = () => {\r\n\r\n  const title = \"Graph Painter\";\r\n  \r\n  return (\r\n    <header>\r\n      <h1>{title}</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\ninterface NodeProp {\r\n  size: { y: number, x: number },\r\n  value: string,\r\n  onPointerDown: React.PointerEventHandler<SVGCircleElement>,\r\n  onPointerUp: React.PointerEventHandler<SVGCircleElement>,\r\n  onPointerMove: React.PointerEventHandler<SVGCircleElement>,\r\n  color?: string\r\n};\r\n\r\nconst Node = ({ size,\r\n  value,\r\n  onPointerDown,\r\n  onPointerUp,\r\n  onPointerMove,\r\n  color = '#cfcfcf' }: NodeProp) => {\r\n\r\n  const { y, x } = size;\r\n\r\n  return (\r\n    <>\r\n      <g>\r\n        <circle cy={x}\r\n          cx={y}\r\n          r='22'\r\n          fill='#16afc0'\r\n          stroke={color}\r\n          strokeWidth='2.5'\r\n          onPointerDown={onPointerDown}\r\n          onPointerUp={onPointerUp}\r\n          onPointerMove={onPointerMove}\r\n        />\r\n        <text y={x}\r\n          x={y}\r\n          dy='.35em'\r\n          fontSize=\"17\"\r\n          fill='white'\r\n          textAnchor='middle'>{value}</text>\r\n      </g>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Node;","import { useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/index';\r\n\r\ninterface EdgeProp {\r\n  from: number[];\r\n  to: number[];\r\n  cost: string;\r\n  color? : string;\r\n};\r\n\r\nconst calculCostCoord = (from: number[], to: number[]) => {\r\n\r\n  const maxY = Math.max(from[0], to[0]);\r\n  const maxX = Math.max(from[1], to[1]);\r\n  const minY = Math.min(from[0], to[0]);\r\n  const minX = Math.min(from[1], to[1]);\r\n\r\n  // cost 위치 미세조정\r\n  let gap = 0;\r\n  if (to[0] > from[0] && to[1] > from[1])\r\n    gap += 15;\r\n  else if (to[0] < from[0] && to[1] < from[1])\r\n    gap += 12;\r\n\r\n  return [((maxY - minY) / 2) + minY - gap, ((maxX - minX) / 2) + minX + gap];\r\n}\r\n\r\nconst Edge = ({ from, to, cost, color = '#cfcfcf'}: EdgeProp) => {\r\n\r\n  const { direct } = useSelector((state: RootState) => ({\r\n    direct: state.direct.directed\r\n  }));\r\n\r\n  const [fromY, fromX] = from;\r\n  const [toY, toX] = to;\r\n  const [costY, costX] = calculCostCoord(from, to);\r\n\r\n  const coord = `M ${fromY} ${fromX} L ${toY} ${toX}`;\r\n  const arrowMark = direct === true ? \"url(#arrow)\" : \"\";\r\n\r\n  return (\r\n    <>\r\n      <g>\r\n        <defs>\r\n          <marker\r\n            id=\"arrow\"\r\n            viewBox=\"0 0 10 10\"\r\n            refX=\"23\"\r\n            refY=\"5\"\r\n            markerWidth=\"8\"\r\n            markerHeight=\"8\"\r\n            orient=\"auto-start-reverse\">\r\n            <path d=\"M 0 0 L 10 5 L 0 10 z\" fill='#cfcfcf' />\r\n          </marker>\r\n        </defs>\r\n        <path d={coord}\r\n          strokeWidth=\"2\"\r\n          stroke={color}\r\n          markerEnd={arrowMark}\r\n        />\r\n        <text y={costX}\r\n          x={costY}\r\n          dx='.3em'\r\n          dy='.9em'\r\n          fontSize=\"17\"\r\n          fill={color}\r\n          textAnchor='right'>{cost}</text>\r\n      </g>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Edge;","import { Graph } from '../redux/graph';\r\n\r\nexport interface Vertex {\r\n  connectedList: string[][];\r\n  coord: Point;\r\n}\r\n\r\nexport class Point {\r\n\r\n  public readonly y: number;\r\n  public readonly x: number;\r\n\r\n  constructor(y: number, x: number) {\r\n    this.y = y;\r\n    this.x = x;\r\n  }\r\n}\r\n\r\nexport class CoordCalculator {\r\n\r\n  private graphInfo: Graph;\r\n  private vertexCount: number = 0;\r\n  private leftTop: Point;\r\n  private rightBottom: Point;\r\n  private nodeCoord: Point[] = [];\r\n\r\n  constructor(builder: CoordCalculatorBuilder) {\r\n\r\n    this.graphInfo = builder.getGraphInfo();\r\n    this.leftTop = builder.getLeftTop();\r\n    this.rightBottom = builder.getRightBottom();\r\n    this.vertexCount = Number(this.graphInfo.vertexCount);\r\n  }\r\n\r\n  // 1. 이진분할로 좌표 배치 셋팅\r\n  // 2. 노드갯수만큼 추출\r\n\r\n  public run() {\r\n\r\n    this.BinarySpacePartitioning({ ...this.leftTop }, { ...this.rightBottom }, 0);\r\n    this.extractNodeCoordList();\r\n\r\n    // return this.setVertexInfo(this.extractVertex());\r\n    return this.extractVertex();\r\n  }\r\n\r\n  public BinarySpacePartitioning(leftTop: Point, rightBottom: Point, depth: number) {\r\n\r\n    if (2 ** depth >= this.vertexCount) {\r\n\r\n      const randomY = Math.floor(Math.random() * (rightBottom.y - leftTop.y) + leftTop.y);\r\n      const randomX = Math.floor(Math.random() * (rightBottom.x - leftTop.x) + leftTop.x);\r\n\r\n      this.nodeCoord.push(new Point(randomY, randomX));\r\n\r\n      return;\r\n    }\r\n\r\n    const axis = Math.floor(Math.floor(Math.random() * 2));\r\n    const ratio = Math.floor((Math.random() * (6 - 3)) + 4);\r\n\r\n    // 가로로 나눔\r\n    if (axis === 0) {\r\n\r\n      const height = (((rightBottom.y - leftTop.y) * ratio) / 10) + leftTop.y;\r\n      this.BinarySpacePartitioning({ ...leftTop }, new Point(height, rightBottom.x), depth + 1);\r\n      this.BinarySpacePartitioning(new Point(height + 1, leftTop.x), { ...rightBottom }, depth + 1);\r\n    }\r\n    // 세로로 나눔\r\n    else {\r\n      const width = (((rightBottom.x - leftTop.x) * ratio) / 10) + leftTop.x;\r\n      this.BinarySpacePartitioning({ ...leftTop }, new Point(rightBottom.y, width), depth + 1);\r\n      this.BinarySpacePartitioning(new Point(leftTop.y, width + 1), { ...rightBottom }, depth + 1);\r\n    }\r\n  }\r\n\r\n  // 랜덤한 노드 좌표 중 노드갯수만큼 뽑아낸다.\r\n  public extractNodeCoordList() {\r\n\r\n    let cnt = this.nodeCoord.length - this.vertexCount;\r\n\r\n    while (cnt) {\r\n      const length = this.nodeCoord.length;\r\n      const idx = Math.floor(Math.random() * length);\r\n      this.nodeCoord.splice(idx, 1);\r\n      cnt--;\r\n    }\r\n  }\r\n\r\n  // 정점만 추출해낸다.\r\n  public extractVertex(init = { connectedList: [], coord: undefined }) {\r\n\r\n    const vertexList: { [key: string]: Vertex } = {};\r\n\r\n    Object.entries(this.graphInfo.graph).forEach((ele, idx) => {\r\n\r\n      const [key, value] = ele;\r\n\r\n      // 정점 객수를 넘어가면 리턴\r\n      if (Object.keys(vertexList).length >= this.vertexCount && value.length <= 0)\r\n        return;\r\n\r\n      vertexList[key] = vertexList[key] || { ...init };\r\n      if (!vertexList[key].coord) {\r\n        vertexList[key].coord = this.nodeCoord[0];\r\n        this.nodeCoord.shift();\r\n      }\r\n\r\n      vertexList[key].connectedList = this.connect(vertexList, value);\r\n    })\r\n\r\n    return vertexList;\r\n  }\r\n\r\n  public connect(vertexList: { [key: string]: Vertex }, connectedList: string[][]) {\r\n\r\n    const ret: string[][] = [];\r\n    connectedList.forEach(vele => {\r\n\r\n      if (vele[0] === '' || vele[0] === undefined)\r\n        return;\r\n\r\n      // 키값 개수는 정점갯수를 넘고 새로운 정점키값일 경우 리턴\r\n      if (Object.keys(vertexList).length >= this.vertexCount\r\n      && vertexList[vele[0]] === undefined )\r\n        return;\r\n\r\n      ret.push(vele);\r\n      vertexList[vele[0]] = vertexList[vele[0]] || { connectedList: [], coord: undefined };\r\n\r\n      if (!vertexList[vele[0]].coord) {\r\n        vertexList[vele[0]].coord = this.nodeCoord[0];\r\n        this.nodeCoord.shift();\r\n      }\r\n    })\r\n\r\n    return ret;\r\n  }\r\n}\r\n\r\nexport class CoordCalculatorBuilder {\r\n\r\n  private graphInfo: Graph;\r\n  private leftTop: Point;\r\n  private rightBottom: Point;\r\n\r\n  public setGraphInfo(graphInfo: Graph) {\r\n    this.graphInfo = graphInfo;\r\n    return this;\r\n  }\r\n\r\n  public setLeftTop(pt: Point) {\r\n    this.leftTop = pt;\r\n    return this;\r\n  }\r\n\r\n  public setRightBottom(pt: Point) {\r\n    this.rightBottom = pt;\r\n    return this;\r\n  }\r\n\r\n  public getGraphInfo() {\r\n    return this.graphInfo;\r\n  }\r\n\r\n  public getLeftTop() {\r\n    return this.leftTop;\r\n  }\r\n\r\n  public getRightBottom() {\r\n    return this.rightBottom;\r\n  }\r\n\r\n  public build() {\r\n    return new CoordCalculator(this);\r\n  }\r\n}","import React, { useRef, useEffect, useState } from 'react';\r\nimport Node from '../atoms/Node';\r\nimport Edge from '../atoms/Edge';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/index';\r\nimport { GraphState } from '../../redux/graph';\r\nimport { debounce, throttle } from 'lodash';\r\nimport { CoordCalculator, Point, CoordCalculatorBuilder, Vertex } from '../../modules/CoordCalculator';\r\n\r\nconst BOARDSIZE = 20 as const;\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst isShortestEdge = (\r\n  shortestPath: { [key: string]: boolean },\r\n  vertex: string,\r\n  nextVertex: string): boolean => {\r\n  \r\n  const vertexCount = Object.keys(shortestPath).length;\r\n\r\n  if (shortestPath[vertex] && shortestPath[nextVertex] && vertexCount > 2)\r\n    return false;\r\n  return Object.keys(shortestPath).includes(vertex) && Object.keys(shortestPath).includes(nextVertex);\r\n}\r\n\r\nconst outofRange = (value: number, size: Size): number => {\r\n\r\n  if (value <= BOARDSIZE)\r\n    value = BOARDSIZE * 2;\r\n  if (value >= size.height - BOARDSIZE)\r\n    value = size.height - BOARDSIZE * 2;\r\n\r\n  return value;\r\n}\r\n\r\n\r\nconst Main = () => {\r\n\r\n  const ref = useRef<any>(null);\r\n  const [size, setSize] = useState<Size>({ width: 0, height: 0 });\r\n  const [vertexInfo, setVertexInfo] = useState<{ [key: string]: Vertex }>({});\r\n  const [dragActive, setdragActive] = useState<boolean>(false);\r\n\r\n  const { graphInfo, shortestPath } = useSelector((state: RootState) => ({\r\n    graphInfo: state.graph.graph,\r\n    shortestPath: state.path\r\n  }));\r\n\r\n  useEffect(() => {\r\n\r\n    setSize(prev => ({\r\n      ...prev,\r\n      width: ref.current.offsetWidth,\r\n      height: ref.current.offsetHeight\r\n    }))\r\n\r\n    const coordCalculator: CoordCalculator = new CoordCalculatorBuilder()\r\n      .setGraphInfo(graphInfo)\r\n      .setLeftTop(new Point(0 + BOARDSIZE * 2, 0 + BOARDSIZE * 2))\r\n      .setRightBottom(new Point(size.width - BOARDSIZE * 2, size.height - BOARDSIZE * 2))\r\n      .build();\r\n\r\n    setVertexInfo(prev => ({ ...coordCalculator.run() }));\r\n\r\n  }, [ref, graphInfo, size.width, size.height]);\r\n\r\n  const handlePointerDown = () => setdragActive(true);\r\n  const handlePointerUp = () => setdragActive(false);\r\n  const handlePointerMove = debounce((e: React.PointerEvent<SVGCircleElement>, data: [string, Vertex]) => {\r\n\r\n    const [vertex, value] = data;\r\n\r\n    const y = outofRange(value.coord.y + e.movementX, size);\r\n    const x = outofRange(value.coord.x + e.movementY, size);\r\n\r\n    if (dragActive) {\r\n      setVertexInfo(prev => ({\r\n        ...prev,\r\n        [vertex]: {\r\n          ...vertexInfo[vertex],\r\n          coord: new Point(y, x)\r\n        }\r\n      }))\r\n    }\r\n  }, 10);\r\n\r\n  const nodeList: JSX.Element[] = Object.entries(vertexInfo).map((ele, idx) => {\r\n\r\n    const [vertex, value] = ele;\r\n\r\n    return (\r\n      <Node\r\n        key={idx}\r\n        size={{\r\n          y: value.coord.y,\r\n          x: value.coord.x\r\n        }}\r\n        value={vertex}\r\n        onPointerMove={(e: React.PointerEvent<SVGCircleElement>) => handlePointerMove(e, ele)}\r\n        onPointerDown={handlePointerDown}\r\n        onPointerUp={handlePointerUp}\r\n      />\r\n    )\r\n  })\r\n\r\n  const edgeList: JSX.Element[][] = Object.entries(vertexInfo).map((ele, idx1, self) => {\r\n\r\n    const [vertex, value] = ele;\r\n    const p1: Point = value.coord;\r\n\r\n    return value.connectedList.map((connectedVertex, idx2) => {\r\n\r\n      const [nextVertex, cost] = connectedVertex;\r\n      const p2: Point = vertexInfo[nextVertex].coord;\r\n\r\n      const color = isShortestEdge(shortestPath.path, vertex, nextVertex) ? '#ebe534' : undefined;\r\n\r\n      return (\r\n        <Edge\r\n          key={idx1 * self.length + idx2}\r\n          from={[p1.y, p1.x]}\r\n          to={[p2.y, p2.x]}\r\n          cost={cost}\r\n          color={color}\r\n        />\r\n      )\r\n    })\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <main ref={ref}>\r\n        <svg\r\n          style={{ width: size.width, height: size.height }}\r\n          onClick={() => setdragActive(false)}>\r\n          {edgeList}\r\n          {nodeList}\r\n        </svg>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import './css/App.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport * as reducer from './redux/index';\r\nimport Aside from './components/templates/Aside';\r\nimport Header from './components/templates/Header';\r\nimport Main from './components/molecules/Main';\r\n\r\nconst App = () => {\r\n\r\n  console.log('App render');\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className='container'>\r\n        <Aside />\r\n        <Main />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\n// 5 6\r\n// 1\r\n// 5 1 1\r\n// 1 2 2\r\n// 1 3 3\r\n// 2 3 4\r\n// 2 4 5\r\n// 3 4 6","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from 'redux';\r\nimport graphReducer, { GraphState } from './graph';\r\nimport directReducer, { DirectState } from './direct';\r\nimport shortestPathReducer, { ShortestPathState } from './shortestpath';\r\n\r\nexport interface RootState {\r\n  graph : GraphState,\r\n  direct : DirectState,\r\n  path : ShortestPathState\r\n}\r\n\r\nexport default combineReducers<RootState>({\r\n  graph: graphReducer,\r\n  direct: directReducer,\r\n  path: shortestPathReducer\r\n});\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport composeWithDevTools from 'redux-devtools-extension'; // 리덕스 개발자 도구\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport rootReducer from './redux/index';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}