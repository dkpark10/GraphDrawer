{"version":3,"sources":["modules/MakeGraph.ts","redux/shortestpath.ts","redux/graph.ts","components/atoms/TextArea.tsx","components/atoms/Toggle.tsx","components/atoms/Input.tsx","redux/direct.ts","modules/Dijkstra.ts","components/molecules/Config.tsx","components/templates/Aside.tsx","components/templates/Header.tsx","components/atoms/Node.tsx","components/atoms/Edge.tsx","modules/CoordCalculator.ts","components/molecules/Main.tsx","App.tsx","reportWebVitals.js","redux/index.ts","index.js"],"names":["makeGraph","graph","reduce","acc","ele","dix","split","vertex1","vertex2","cost","undefined","push","SETSHORTESTPATH","initialState","from","to","path","setShortestPath","diff","type","payload","SETGRAPHINFO","vertexCount","edgeCount","setGraphInfo","Textarea","dispatch","useDispatch","useState","value","setValue","useEffect","inputValue","splice","style","resize","onChange","e","ng","target","edgecnt","isNaN","Number","debounceIDinputCheck","prev","Toggle","className","Input","text","name","fontSize","width","height","SETDIRECT","directed","INF","Math","floor","MAX_SAFE_INTEGER","Dijkstra","builder","initGraph","this","getGraphInfo","getFromVertex","getToVertex","mapping","isExistVertex","backtracking","dijkstra","Object","entries","forEach","currentVertex","isExceedVertexCount","length","ele2","nextVertex","keys","includes","dist","pq","PriorityQueue","comparator","a","b","queue","peek","curVertex","dequeue","tmpcost","nextCost","ret","x","edg","DijkstraBuilder","graphInfo","LabelStyle","margin","Config","inputList","setInputList","useSelector","state","checked","onClick","setFromVertex","setToVertex","build","run","window","open","cursor","alt","src","Aside","Header","Node","size","onPointerDown","onPointerUp","onPointerMove","isDraged","color","y","ref","useRef","isDraggedNode","dragActive","currentNode","current","cy","cx","r","fill","stroke","strokeWidth","fontWeight","dy","textAnchor","Edge","direct","fromY","fromX","toY","toX","maxY","max","maxX","minY","min","minX","gap","calculCostCoord","costY","costX","coord","arrowMark","id","viewBox","refX","refY","markerWidth","markerHeight","orient","d","markerEnd","dx","Point","CoordCalculator","leftTop","rightBottom","nodeCoord","getLeftTop","getRightBottom","BinarySpacePartitioning","extractNodeCoordList","extractVertex","depth","randomY","random","randomX","axis","ratio","cnt","idx","init","connectedList","vertexList","key","shift","connect","vele","CoordCalculatorBuilder","pt","BOARDSIZE","outofRange","Main","setSize","vertexInfo","setVertexInfo","setdragActive","off","setOff","shortestPath","offsetWidth","offsetHeight","coordCalculator","setLeftTop","setRightBottom","handlePointerDown","box","currentTarget","getBoundingClientRect","offX","clientX","left","offY","clientY","top","setPointerCapture","pointerId","handlePointerUp","nodeList","map","vertex","data","preventDefault","xx","movementX","yy","movementY","toff","moveY","moveX","handlePointerMove","edgeList","idx1","self","p1","connectedVertex","idx2","p2","isShortestEdge","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","action","store","createStore","rootReducer","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f654884b.chunk.js","sourcesContent":["interface EdgeInfo {\r\n  [key: string]: string[][];\r\n};\r\n\r\nconst makeGraph = (graph: string[]) => {\r\n\r\n  return graph.reduce((acc: EdgeInfo, ele, dix): EdgeInfo => {\r\n    \r\n    const [vertex1, vertex2, cost] = ele.split(' ');\r\n\r\n    if(vertex1 === '')\r\n      return acc;\r\n\r\n    acc[vertex1] = acc[vertex1] || [];\r\n\r\n    if (vertex2 === undefined && cost === undefined) \r\n      return acc;\r\n\r\n    if (vertex2 === '')\r\n      return acc;\r\n    \r\n    acc[vertex1].push([vertex2, cost]);\r\n\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\nexport default makeGraph;","export const SETSHORTESTPATH = 'SETSHORTESTPATH' as const;\r\n\r\nexport interface ShortestPathState {\r\n  from : string;\r\n  to: string;\r\n  path: { [key: string]: boolean };\r\n}\r\n\r\ninterface Action {\r\n  type: string;\r\n  payload: ShortestPathState;\r\n}\r\n\r\nexport const initialState: ShortestPathState = {\r\n  from: '',\r\n  to: '',\r\n  path: {}\r\n};\r\n\r\n// action creator\r\nexport const setShortestPath = (diff: ShortestPathState) => ({\r\n  type: SETSHORTESTPATH,\r\n  payload: diff\r\n});\r\n\r\n// 리듀서\r\nexport default function shortestPathReducer(state: ShortestPathState = initialState, action: Action): ShortestPathState {\r\n  switch (action.type) {\r\n    case SETSHORTESTPATH:\r\n      return {\r\n        ...state,\r\n        from : action.payload.from,\r\n        to : action.payload.to,\r\n        path: action.payload.path\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","export const SETGRAPHINFO = 'SETGRAPHINFO' as const;\r\n\r\nexport interface Graph {\r\n  vertexCount: string;\r\n  edgeCount: string;\r\n  graph: { [key: string]: string[][] };\r\n}\r\n\r\nexport interface GraphState {\r\n  graph: Graph;\r\n};\r\n\r\ninterface Action {\r\n  type: string;\r\n  payload: Graph;\r\n}\r\n\r\nconst initialState: GraphState = {\r\n  graph: {\r\n    vertexCount: '0',\r\n    edgeCount: '',\r\n    graph: {}\r\n  }\r\n};\r\n\r\n// action creator\r\nexport const setGraphInfo = (diff: Graph) => ({\r\n  type: SETGRAPHINFO,\r\n  payload: diff\r\n});\r\n\r\n// 리듀서\r\nexport default function graphReducer(state: GraphState = initialState, action: Action): GraphState {\r\n  switch (action.type) {\r\n    case SETGRAPHINFO:\r\n      return {\r\n        ...state,\r\n        graph: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport makeGraph from '../../modules/MakeGraph';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setShortestPath, initialState } from '../../redux/shortestpath';\r\nimport { setGraphInfo, Graph } from '../../redux/graph';\r\n\r\nconst debounceIDinputCheck = (e: React.ChangeEvent<HTMLTextAreaElement>): Graph | undefined => {\r\n\r\n  const inputValue: string[] = e.target.value.split('\\n');\r\n  const [vertexCount, edgecnt]: string[] = inputValue[0].split(\" \");\r\n\r\n  if (isNaN(Number(vertexCount)) === true && isNaN(Number(edgecnt)) === true) {\r\n    return undefined;\r\n  }\r\n\r\n  const graph = makeGraph(inputValue.splice(1));\r\n\r\n  return {\r\n    vertexCount: vertexCount,\r\n    edgeCount: edgecnt,\r\n    graph: graph\r\n  };\r\n}\r\n\r\nconst Textarea = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const init = '6\\n1 2 2\\n2 3 8\\n3 4 1\\n1 4 9\\n4 5 7\\n5 6 2\\n4 6 6\\n3 6 9';\r\n  const [value, setValue] = useState<string>(init);\r\n\r\n  useEffect(() => {\r\n\r\n    const inputValue = value.split('\\n');\r\n    const graph = makeGraph(inputValue.splice(1));\r\n\r\n    dispatch(setGraphInfo({\r\n      vertexCount: '6',\r\n      edgeCount: '',\r\n      graph\r\n    }));\r\n\r\n  }, [value, dispatch]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n\r\n    const ng: Graph | undefined = debounceIDinputCheck(e);\r\n    if (ng !== undefined) {\r\n      dispatch(setGraphInfo(ng as Graph));\r\n      dispatch(setShortestPath(initialState));\r\n    }\r\n\r\n    setValue(prev => e.target.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <textarea\r\n        style={{ resize: 'none' }}\r\n        value={value}\r\n        onChange={handleChange} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Textarea;","import React from \"react\";\r\n\r\ninterface ToggleProps {\r\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\r\n}\r\n\r\nconst Toggle = ({ onChange }: ToggleProps) => {\r\n\r\n  return (\r\n    <>\r\n      <label className='direct-button'>\r\n        <input type='checkbox' onChange={onChange}/>\r\n        <span className='onoff-switch' />\r\n      </label>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Toggle;","interface InputProps {\r\n  text: string;\r\n  name: string;\r\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\r\n  value: string;\r\n  width?: string;\r\n}\r\n\r\nconst Input = ({ text, name, onChange, value }: InputProps) => {\r\n\r\n  return (\r\n    <>\r\n      <label style={{ fontSize: '13px' }}> {text} </label>\r\n      <input type='text' name={name} onChange={onChange} value={value} style={{ width: '40px', height: '25px' }}>\r\n      </input>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Input;","export const SETDIRECT = 'SETDIRECT' as const;\r\n\r\nexport interface DirectState {\r\n  directed: boolean;\r\n}\r\n\r\ninterface Action {\r\n  type: string;\r\n  payload: boolean;\r\n}\r\n\r\nconst initialState: DirectState = {\r\n  directed: false\r\n};\r\n\r\n// action creator\r\nexport const setDirected = (diff: boolean) => ({\r\n  type: SETDIRECT,\r\n  payload: diff\r\n});\r\n\r\n// 리듀서\r\nexport default function directReducer(state: DirectState = initialState, action: Action): DirectState {\r\n  switch (action.type) {\r\n    case SETDIRECT:\r\n      return {\r\n        ...state,\r\n        directed : action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { Graph } from '../redux/graph';\r\nimport PriorityQueue from 'ts-priority-queue';\r\n\r\ninterface EdgeInfo {\r\n  [key: string]: { [key: string]: string };\r\n}\r\n\r\ntype Pair = [number, string];\r\n\r\nconst INF = Math.floor(Number.MAX_SAFE_INTEGER / 987);\r\n\r\nexport class Dijkstra {\r\n\r\n  private initGraph: Graph;\r\n  private from: string;\r\n  private to: string;\r\n  private graph: EdgeInfo = {};\r\n  private vertexCount: number = 0;\r\n\r\n  constructor(builder: DijkstraBuilder) {\r\n\r\n    this.initGraph = builder.getGraphInfo();\r\n    this.from = builder.getFromVertex();\r\n    this.to = builder.getToVertex();\r\n    this.vertexCount = Number(this.initGraph.vertexCount);\r\n  }\r\n\r\n  public run() {\r\n\r\n    this.mapping();\r\n\r\n    if (this.isExistVertex() === false)\r\n      return false;\r\n\r\n    return this.backtracking(this.dijkstra());\r\n  }\r\n\r\n  public mapping() {\r\n\r\n    Object.entries(this.initGraph.graph).forEach(ele => {\r\n\r\n      const [currentVertex, value] = ele;\r\n\r\n      if (this.isExceedVertexCount(this.graph) && value.length <= 0)\r\n        return;\r\n\r\n      this.graph[currentVertex] = this.graph[currentVertex] || {};\r\n\r\n      value.forEach(ele2 => {\r\n\r\n        const [nextVertex, cost] = ele2;\r\n        if (nextVertex === undefined && cost === undefined)\r\n          return;\r\n\r\n        if (this.isExceedVertexCount(this.graph) && !this.graph[nextVertex])\r\n          return;\r\n\r\n        this.graph[nextVertex] = this.graph[nextVertex] || {};\r\n\r\n        // 현재 정점과 연결된 정점 객체가 존재하지 않는다면\r\n        if (Object.keys(this.graph[currentVertex]).includes(nextVertex) === false) {\r\n          this.graph[currentVertex][nextVertex] = cost;\r\n        }\r\n        // 양방향으로 연결한다.\r\n        if (Object.keys(this.graph[nextVertex]).includes(currentVertex) === false) {\r\n          this.graph[nextVertex][currentVertex] = cost;\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  public dijkstra() {\r\n\r\n    const dist: { [key: string]: number } = {};\r\n    const path: { [key: string]: string } = {};\r\n\r\n    Object.keys(this.graph).forEach(ele => {\r\n      dist[ele] = dist[ele] || INF\r\n      path[ele] = path[ele] || ele;\r\n    });\r\n\r\n    dist[this.from] = 0;\r\n\r\n    const pq = new PriorityQueue({ comparator: (a: Pair, b: Pair) => a[0] - b[0] });\r\n    pq.queue([0, this.from]);\r\n\r\n    while (pq.length) {\r\n\r\n      const [cost, curVertex] = pq.peek();\r\n      pq.dequeue();\r\n\r\n      if (dist[curVertex] < cost)\r\n        continue;\r\n\r\n      Object.entries(this.graph[curVertex]).forEach(ele => {\r\n\r\n        const [nextVertex, tmpcost] = ele;\r\n        const nextCost = Number(tmpcost) + cost;\r\n\r\n        if (nextCost < dist[nextVertex]) {\r\n          path[nextVertex] = curVertex;\r\n          dist[nextVertex] = nextCost;\r\n          pq.queue([nextCost, nextVertex]);\r\n        }\r\n      });\r\n    }\r\n    return path;\r\n  }\r\n\r\n  // 최단경로 역추적\r\n  public backtracking(path: { [key: string]: string }) {\r\n\r\n    const ret: { [key: string]: boolean } = {};\r\n    let x = this.to;\r\n\r\n    while (x !== path[x]) {\r\n      ret[x] = ret[x] || false;\r\n      x = path[x];\r\n    }\r\n\r\n    ret[x] = ret[x] || false;\r\n    ret[this.to] = true;\r\n    ret[this.from] = true;\r\n    \r\n    return ret;\r\n  }\r\n\r\n  // from to 정점이 하나라도 없다면\r\n  public isExistVertex() {\r\n    return Object.keys(this.graph).includes(this.from) && Object.keys(this.graph).includes(this.to);\r\n  }\r\n\r\n  // 객체 키값 개수가 정점 개수를 초과하는가?\r\n  public isExceedVertexCount(edg: EdgeInfo) {\r\n    return Object.keys(this.graph).length >= this.vertexCount;\r\n  }\r\n}\r\n\r\n\r\nexport class DijkstraBuilder {\r\n\r\n  private graphInfo: Graph;\r\n  private from: string;\r\n  private to: string;\r\n\r\n  public setGraphInfo(graphInfo: Graph) {\r\n    this.graphInfo = graphInfo;\r\n    return this;\r\n  }\r\n\r\n  public setFromVertex(from: string) {\r\n    this.from = from;\r\n    return this;\r\n  }\r\n\r\n  public setToVertex(to: string) {\r\n    this.to = to;\r\n    return this;\r\n  }\r\n\r\n  public getGraphInfo() {\r\n    return this.graphInfo;\r\n  }\r\n\r\n  public getFromVertex() {\r\n    return this.from;\r\n  }\r\n\r\n  public getToVertex() {\r\n    return this.to;\r\n  }\r\n\r\n  public build() {\r\n    return new Dijkstra(this);\r\n  }\r\n}","import Toggle from '../atoms/Toggle';\r\nimport Input from '../atoms/Input';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setDirected } from '../../redux/direct';\r\nimport { setShortestPath } from '../../redux/shortestpath';\r\nimport React, { useState } from 'react';\r\nimport { Dijkstra, DijkstraBuilder } from '../../modules/Dijkstra';\r\nimport { RootState } from '../../redux/index';\r\n\r\nconst LabelStyle = {\r\n  margin: '12px',\r\n  fontSize: '15px',\r\n}\r\n\r\ntype changeEventInput = React.ChangeEvent<HTMLInputElement>;\r\n\r\ninterface InputList {\r\n  from: string;\r\n  to: string;\r\n};\r\n\r\nconst Config = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const [inputList, setInputList] = useState<InputList>({\r\n    from: '',\r\n    to: '',\r\n  });\r\n  const { graphInfo } = useSelector((state: RootState) => ({\r\n    graphInfo: state.graph.graph\r\n  }));\r\n\r\n  const toggleOnChange = (e: changeEventInput) => dispatch(setDirected(e.target.checked));\r\n\r\n  const run = () => {\r\n\r\n    const dijkstra: Dijkstra = new DijkstraBuilder()\r\n      .setGraphInfo(graphInfo)\r\n      .setFromVertex(inputList.from)\r\n      .setToVertex(inputList.to)\r\n      .build();\r\n\r\n    const ret = dijkstra.run();\r\n\r\n    if (ret !== false) {\r\n      dispatch(setShortestPath({\r\n        from: inputList.from,\r\n        to: inputList.to,\r\n        path: ret\r\n      }));\r\n    }\r\n  }\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n    const { name, value } = e.target;\r\n\r\n    if (name === 'path-from') {\r\n      setInputList(prev => ({\r\n        ...prev,\r\n        from: value,\r\n      }))\r\n\r\n    } else {\r\n      setInputList(prev => ({\r\n        ...prev,\r\n        to: value,\r\n      }))\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className='config'>\r\n        <label style={LabelStyle}>Undirected : Directed</label>\r\n        <Toggle onChange={toggleOnChange} />\r\n        <label style={LabelStyle}>Shortest Path Find</label>\r\n        <div>\r\n          <Input text='from' name='path-from' onChange={onChange} value={inputList.from} />\r\n          <Input text='to' name='path-to' onChange={onChange} value={inputList.to} />\r\n        </div>\r\n        <button onClick={run}>Find</button>\r\n        <img\r\n          onClick={() => window.open('https://github.com/dkpark10/graphpainter', '_blank')}\r\n          style={{ width: '45px', height: '45px', cursor: 'pointer' }}\r\n          alt='my github'\r\n          src='https://media.cdnandroid.com/item_images/1097581/imagen-github-0thumb.jpeg'>\r\n        </img>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Config;\r\n","import React from \"react\";\r\nimport Textarea from '../atoms/TextArea';\r\nimport Config from '../molecules/Config';\r\nimport { debounce, throttle } from 'lodash';\r\n\r\nconst Aside = () => {\r\n\r\n  return (\r\n    <>\r\n      <aside>\r\n        <Textarea />\r\n        <Config />\r\n      </aside>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Aside;","const Header = () => {\r\n\r\n  const title = \"Graph Painter\";\r\n  \r\n  return (\r\n    <header>\r\n      <h1>{title}</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React, { useEffect, useRef } from 'react';\r\nimport { IDragNode } from '../molecules/Main';\r\n\r\ninterface NodeProp {\r\n  size: { y: number, x: number },\r\n  value: string,\r\n  onPointerDown: React.PointerEventHandler<SVGCircleElement>,\r\n  onPointerUp: React.PointerEventHandler<SVGCircleElement>,\r\n  onPointerMove: React.PointerEventHandler<SVGCircleElement>,\r\n  isDraged: IDragNode;\r\n  color?: string\r\n};\r\n\r\nconst Node = ({ size,\r\n  value,\r\n  onPointerDown,\r\n  onPointerUp,\r\n  onPointerMove,\r\n  isDraged,\r\n  color = '#cfcfcf' }: NodeProp) => {\r\n\r\n  const { y, x } = size;\r\n  const ref = useRef<any>(null);\r\n\r\n  const isDraggedNode = isDraged.dragActive && isDraged.currentNode === ref.current;\r\n\r\n  useEffect(() => {\r\n    return (() => {\r\n      ref.current = null;\r\n    })\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <g\r\n        style={{ cursor: 'pointer' }}\r\n      >\r\n        <circle\r\n          ref={ref}\r\n          cy={x}\r\n          cx={y}\r\n          r='22'\r\n          fill={isDraggedNode ? '#ebe534' : '#16afc0'}\r\n          stroke={color}\r\n          strokeWidth='2.5'\r\n          onPointerDown={onPointerDown}\r\n          onPointerUp={onPointerUp}\r\n          onPointerMove={onPointerMove}\r\n        />\r\n        <text\r\n          style={{ fontWeight: 'bold' }}\r\n          y={x}\r\n          x={y}\r\n          dy='.35em'\r\n          fontSize=\"17\"\r\n          fill={isDraggedNode ? 'black' : 'white'}\r\n          textAnchor='middle'>{value}</text>\r\n      </g>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Node;","import { useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/index';\r\n\r\ninterface EdgeProp {\r\n  from: number[];\r\n  to: number[];\r\n  cost: string;\r\n  color? : string;\r\n};\r\n\r\nconst calculCostCoord = (from: number[], to: number[]) => {\r\n\r\n  const maxY = Math.max(from[0], to[0]);\r\n  const maxX = Math.max(from[1], to[1]);\r\n  const minY = Math.min(from[0], to[0]);\r\n  const minX = Math.min(from[1], to[1]);\r\n\r\n  // cost 위치 미세조정\r\n  let gap = 0;\r\n  if (to[0] > from[0] && to[1] > from[1])\r\n    gap += 15;\r\n  else if (to[0] < from[0] && to[1] < from[1])\r\n    gap += 12;\r\n\r\n  return [((maxY - minY) / 2) + minY - gap, ((maxX - minX) / 2) + minX + gap];\r\n}\r\n\r\nconst Edge = ({ from, to, cost, color = '#cfcfcf'}: EdgeProp) => {\r\n\r\n  const { direct } = useSelector((state: RootState) => ({\r\n    direct: state.direct.directed\r\n  }));\r\n\r\n  const [fromY, fromX] = from;\r\n  const [toY, toX] = to;\r\n  const [costY, costX] = calculCostCoord(from, to);\r\n\r\n  const coord = `M ${fromY} ${fromX} L ${toY} ${toX}`;\r\n  const arrowMark = direct === true ? \"url(#arrow)\" : \"\";\r\n\r\n  return (\r\n    <>\r\n      <g>\r\n        <defs>\r\n          <marker\r\n            id=\"arrow\"\r\n            viewBox=\"0 0 10 10\"\r\n            refX=\"23\"\r\n            refY=\"5\"\r\n            markerWidth=\"8\"\r\n            markerHeight=\"8\"\r\n            orient=\"auto-start-reverse\">\r\n            <path d=\"M 0 0 L 10 5 L 0 10 z\" fill='#cfcfcf' />\r\n          </marker>\r\n        </defs>\r\n        <path d={coord}\r\n          strokeWidth=\"2\"\r\n          stroke={color}\r\n          markerEnd={arrowMark}\r\n        />\r\n        <text y={costX}\r\n          x={costY}\r\n          dx='.3em'\r\n          dy='.9em'\r\n          fontSize=\"17\"\r\n          fill={color}\r\n          textAnchor='right'>{cost}</text>\r\n      </g>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Edge;","import { Graph } from '../redux/graph';\r\n\r\nexport interface Vertex {\r\n  connectedList: string[][];\r\n  coord: Point;\r\n}\r\n\r\nexport class Point {\r\n\r\n  public readonly y: number;\r\n  public readonly x: number;\r\n\r\n  constructor(y: number, x: number) {\r\n    this.y = y;\r\n    this.x = x;\r\n  }\r\n}\r\n\r\nexport class CoordCalculator {\r\n\r\n  private graphInfo: Graph;\r\n  private vertexCount: number = 0;\r\n  private leftTop: Point;\r\n  private rightBottom: Point;\r\n  private nodeCoord: Point[] = [];\r\n\r\n  constructor(builder: CoordCalculatorBuilder) {\r\n\r\n    this.graphInfo = builder.getGraphInfo();\r\n    this.leftTop = builder.getLeftTop();\r\n    this.rightBottom = builder.getRightBottom();\r\n    this.vertexCount = Number(this.graphInfo.vertexCount);\r\n  }\r\n\r\n  // 1. 이진분할로 좌표 배치 셋팅\r\n  // 2. 노드갯수만큼 추출\r\n\r\n  public run() {\r\n\r\n    this.BinarySpacePartitioning({ ...this.leftTop }, { ...this.rightBottom }, 0);\r\n    this.extractNodeCoordList();\r\n\r\n    // return this.setVertexInfo(this.extractVertex());\r\n    return this.extractVertex();\r\n  }\r\n\r\n  public BinarySpacePartitioning(leftTop: Point, rightBottom: Point, depth: number) {\r\n\r\n    if (2 ** depth >= this.vertexCount) {\r\n\r\n      const randomY = Math.floor(Math.random() * (rightBottom.y - leftTop.y) + leftTop.y);\r\n      const randomX = Math.floor(Math.random() * (rightBottom.x - leftTop.x) + leftTop.x);\r\n\r\n      this.nodeCoord.push(new Point(randomY, randomX));\r\n\r\n      return;\r\n    }\r\n\r\n    const axis = Math.floor(Math.floor(Math.random() * 2));\r\n    const ratio = Math.floor((Math.random() * (6 - 3)) + 4);\r\n\r\n    // 가로로 나눔\r\n    if (axis === 0) {\r\n\r\n      const height = (((rightBottom.y - leftTop.y) * ratio) / 10) + leftTop.y;\r\n      this.BinarySpacePartitioning({ ...leftTop }, new Point(height, rightBottom.x), depth + 1);\r\n      this.BinarySpacePartitioning(new Point(height + 1, leftTop.x), { ...rightBottom }, depth + 1);\r\n    }\r\n    // 세로로 나눔\r\n    else {\r\n      const width = (((rightBottom.x - leftTop.x) * ratio) / 10) + leftTop.x;\r\n      this.BinarySpacePartitioning({ ...leftTop }, new Point(rightBottom.y, width), depth + 1);\r\n      this.BinarySpacePartitioning(new Point(leftTop.y, width + 1), { ...rightBottom }, depth + 1);\r\n    }\r\n  }\r\n\r\n  // 랜덤한 노드 좌표 중 노드갯수만큼 뽑아낸다.\r\n  public extractNodeCoordList() {\r\n\r\n    let cnt = this.nodeCoord.length - this.vertexCount;\r\n\r\n    while (cnt) {\r\n      const length = this.nodeCoord.length;\r\n      const idx = Math.floor(Math.random() * length);\r\n      this.nodeCoord.splice(idx, 1);\r\n      cnt--;\r\n    }\r\n  }\r\n\r\n  // 정점만 추출해낸다.\r\n  public extractVertex(init = { connectedList: [], coord: undefined }) {\r\n\r\n    const vertexList: { [key: string]: Vertex } = {};\r\n\r\n    Object.entries(this.graphInfo.graph).forEach((ele, idx) => {\r\n\r\n      const [key, value] = ele;\r\n\r\n      // 정점 객수를 넘어가면 리턴\r\n      if (Object.keys(vertexList).length >= this.vertexCount\r\n        && Object.keys(vertexList).includes(key) === false)\r\n        return;\r\n\r\n      vertexList[key] = vertexList[key] || { ...init };\r\n      if (!vertexList[key].coord) {\r\n        vertexList[key].coord = this.nodeCoord[0];\r\n        this.nodeCoord.shift();\r\n      }\r\n\r\n      vertexList[key].connectedList = this.connect(vertexList, value);\r\n    })\r\n\r\n    return vertexList;\r\n  }\r\n\r\n  public connect(vertexList: { [key: string]: Vertex }, connectedList: string[][]) {\r\n\r\n    const ret: string[][] = [];\r\n    connectedList.forEach(vele => {\r\n\r\n      if (vele[0] === '' || vele[0] === undefined)\r\n        return;\r\n\r\n      // 키값 개수는 정점갯수를 넘고 새로운 정점키값일 경우 리턴\r\n      if (Object.keys(vertexList).length >= this.vertexCount\r\n      && vertexList[vele[0]] === undefined )\r\n        return;\r\n\r\n      ret.push(vele);\r\n      vertexList[vele[0]] = vertexList[vele[0]] || { connectedList: [], coord: undefined };\r\n\r\n      if (!vertexList[vele[0]].coord) {\r\n        vertexList[vele[0]].coord = this.nodeCoord[0];\r\n        this.nodeCoord.shift();\r\n      }\r\n    })\r\n\r\n    return ret;\r\n  }\r\n}\r\n\r\nexport class CoordCalculatorBuilder {\r\n\r\n  private graphInfo: Graph;\r\n  private leftTop: Point;\r\n  private rightBottom: Point;\r\n\r\n  public setGraphInfo(graphInfo: Graph) {\r\n    this.graphInfo = graphInfo;\r\n    return this;\r\n  }\r\n\r\n  public setLeftTop(pt: Point) {\r\n    this.leftTop = pt;\r\n    return this;\r\n  }\r\n\r\n  public setRightBottom(pt: Point) {\r\n    this.rightBottom = pt;\r\n    return this;\r\n  }\r\n\r\n  public getGraphInfo() {\r\n    return this.graphInfo;\r\n  }\r\n\r\n  public getLeftTop() {\r\n    return this.leftTop;\r\n  }\r\n\r\n  public getRightBottom() {\r\n    return this.rightBottom;\r\n  }\r\n\r\n  public build() {\r\n    return new CoordCalculator(this);\r\n  }\r\n}","import React, { useRef, useEffect, useState } from 'react';\r\nimport Node from '../atoms/Node';\r\nimport Edge from '../atoms/Edge';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/index';\r\nimport { CoordCalculator, Point, CoordCalculatorBuilder, Vertex } from '../../modules/CoordCalculator';\r\nimport { debounce } from 'lodash';\r\n\r\nconst BOARDSIZE = 20 as const;\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst isShortestEdge = (\r\n  shortestPath: { [key: string]: boolean },\r\n  vertex: string,\r\n  nextVertex: string): boolean => {\r\n\r\n  const vertexCount = Object.keys(shortestPath).length;\r\n\r\n  if (shortestPath[vertex] && shortestPath[nextVertex] && vertexCount > 2)\r\n    return false;\r\n  return Object.keys(shortestPath).includes(vertex) && Object.keys(shortestPath).includes(nextVertex);\r\n}\r\n\r\nconst outofRange = (value: number, size: Size): number => {\r\n\r\n  if (value <= BOARDSIZE)\r\n    value = BOARDSIZE * 2;\r\n  if (value >= size.height - BOARDSIZE)\r\n    value = size.height - BOARDSIZE * 2;\r\n\r\n  return value;\r\n}\r\n\r\nexport interface IDragNode {\r\n  dragActive: boolean;\r\n  currentNode: any;\r\n};\r\n\r\nconst Main = () => {\r\n\r\n  const ref = useRef<any>(null);\r\n  const [size, setSize] = useState<Size>({ width: 0, height: 0 });\r\n  const [vertexInfo, setVertexInfo] = useState<{ [key: string]: Vertex }>({});\r\n  const [dragActive, setdragActive] = useState<IDragNode>({ dragActive: false, currentNode: null });\r\n  const [off, setOff] = useState<number[]>([0, 0]);\r\n\r\n  const { graphInfo, shortestPath } = useSelector((state: RootState) => ({\r\n    graphInfo: state.graph.graph,\r\n    shortestPath: state.path\r\n  }));\r\n\r\n  useEffect(() => {\r\n\r\n    setSize(prev => ({\r\n      ...prev,\r\n      width: ref.current.offsetWidth,\r\n      height: ref.current.offsetHeight\r\n    }))\r\n\r\n    const coordCalculator: CoordCalculator = new CoordCalculatorBuilder()\r\n      .setGraphInfo(graphInfo)\r\n      .setLeftTop(new Point(0 + BOARDSIZE * 2, 0 + BOARDSIZE * 2))\r\n      .setRightBottom(new Point(size.width - BOARDSIZE * 2, size.height - BOARDSIZE * 2))\r\n      .build();\r\n\r\n    setVertexInfo(prev => ({ ...coordCalculator.run() }));\r\n\r\n  }, [ref, graphInfo, size.width, size.height]);\r\n\r\n  const handlePointerDown = (e: React.PointerEvent<SVGCircleElement>) => {\r\n\r\n    const box = e.currentTarget.getBoundingClientRect();\r\n    const offX = e.clientX - box.left;\r\n    const offY = e.clientY - box.top;\r\n    e.currentTarget.setPointerCapture(e.pointerId);\r\n\r\n    setOff(prev => [offX, offY]);\r\n    setdragActive(({\r\n      ...dragActive,\r\n      dragActive: true,\r\n      currentNode: e.currentTarget\r\n    }));\r\n  }\r\n\r\n  const handlePointerUp = () => {\r\n    setdragActive(prev => ({\r\n      ...prev,\r\n      dragActive: false,\r\n      currentNode: null\r\n    }));\r\n  }\r\n\r\n  const handlePointerMove = ((e: React.PointerEvent<SVGCircleElement>, data: [string, Vertex]) => {\r\n\r\n    e.preventDefault();\r\n    const [vertex, value] = data;\r\n\r\n    const xx = e.movementX + off[1];\r\n    const yy = e.movementY + off[0];\r\n\r\n    if (dragActive.dragActive) {\r\n\r\n      const toff = [...off];\r\n      const moveY = outofRange(value.coord.y - (toff[1] - xx), size);\r\n      const moveX = outofRange(value.coord.x - (toff[0] - yy), size);\r\n\r\n      setVertexInfo(prev => ({\r\n        ...prev,\r\n        [vertex]: {\r\n          ...vertexInfo[vertex],\r\n          coord: new Point(moveY, moveX)\r\n        }\r\n      }))\r\n    }\r\n  });\r\n\r\n  const nodeList: JSX.Element[] = Object.entries(vertexInfo).map((ele, idx) => {\r\n\r\n    const [vertex, value] = ele;\r\n\r\n    return (\r\n      <Node\r\n        key={idx}\r\n        size={{\r\n          y: value.coord.y,\r\n          x: value.coord.x\r\n        }}\r\n        value={vertex}\r\n        onPointerMove={(e: React.PointerEvent<SVGCircleElement>) => handlePointerMove(e, ele)}\r\n        onPointerDown={handlePointerDown}\r\n        onPointerUp={handlePointerUp}\r\n        isDraged={dragActive}\r\n      />\r\n    )\r\n  })\r\n\r\n  const edgeList: JSX.Element[][] = Object.entries(vertexInfo).map((ele, idx1, self) => {\r\n\r\n    const [vertex, value] = ele;\r\n    const p1: Point = value.coord;\r\n\r\n    return value.connectedList.map((connectedVertex, idx2) => {\r\n\r\n      const [nextVertex, cost] = connectedVertex;\r\n      const p2: Point = vertexInfo[nextVertex].coord;\r\n\r\n      const color = isShortestEdge(shortestPath.path, vertex, nextVertex) ? '#ebe534' : undefined;\r\n\r\n      return (\r\n        <Edge\r\n          key={idx1 * self.length + idx2}\r\n          from={[p1.y, p1.x]}\r\n          to={[p2.y, p2.x]}\r\n          cost={cost}\r\n          color={color}\r\n        />\r\n      )\r\n    })\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <main ref={ref}>\r\n        <svg\r\n          style={{ width: size.width, height: size.height }}\r\n        >\r\n          {edgeList}\r\n          {nodeList}\r\n        </svg>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import './css/App.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport * as reducer from './redux/index';\r\nimport Aside from './components/templates/Aside';\r\nimport Header from './components/templates/Header';\r\nimport Main from './components/molecules/Main';\r\n\r\nconst App = () => {\r\n\r\n  console.log('App render');\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className='container'>\r\n        <Aside />\r\n        <Main />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\n// 5 6\r\n// 1\r\n// 5 1 1\r\n// 1 2 2\r\n// 1 3 3\r\n// 2 3 4\r\n// 2 4 5\r\n// 3 4 6","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport graphReducer, { GraphState } from './graph';\r\nimport directReducer, { DirectState } from './direct';\r\nimport shortestPathReducer, { ShortestPathState } from './shortestpath';\r\n\r\nexport interface RootState {\r\n  graph : GraphState,\r\n  direct : DirectState,\r\n  path : ShortestPathState\r\n}\r\n\r\nexport default combineReducers<RootState>({\r\n  graph: graphReducer,\r\n  direct: directReducer,\r\n  path: shortestPathReducer\r\n});\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport composeWithDevTools from 'redux-devtools-extension'; // 리덕스 개발자 도구\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport rootReducer from './redux/index';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}