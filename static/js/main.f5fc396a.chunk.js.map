{"version":3,"sources":["modules/MakeGraph.ts","redux/shortestpath.ts","redux/graph.ts","components/atoms/TextArea.tsx","components/atoms/Toggle.tsx","components/atoms/Input.tsx","redux/direct.ts","modules/Dijkstra.ts","components/molecules/Config.tsx","components/templates/Aside.tsx","components/templates/Header.tsx","components/atoms/Node.tsx","components/atoms/Edge.tsx","modules/CoordCalculator.ts","components/molecules/Main.tsx","App.tsx","redux/index.ts","index.js"],"names":["makeGraph","graph","reduce","acc","ele","split","vertex1","vertex2","cost","undefined","push","SETSHORTESTPATH","initialState","from","to","path","setShortestPath","diff","type","payload","SETGRAPHINFO","vertexCount","edgeCount","TextArea","dispatch","useDispatch","useState","value","setValue","debounceSetGraph","useMemo","debounce","arg","ng","inputValue","edgecnt","isNaN","Number","splice","inputValueParsing","handleChange","useCallback","e","target","useEffect","style","resize","onChange","id","htmlFor","Toggle","className","Input","text","name","fontSize","width","height","SETDIRECT","directed","INF","Math","floor","MAX_SAFE_INTEGER","Dijkstra","builder","initGraph","this","getGraphInfo","getFromVertex","getToVertex","mapping","isExistVertex","backtracking","dijkstra","Object","entries","forEach","currentVertex","isExceedVertexCount","length","ele2","nextVertex","keys","includes","dist","pq","PriorityQueue","comparator","a","b","queue","peek","curVertex","dequeue","tmpcost","nextCost","ret","x","edg","DijkstraBuilder","graphInfo","LabelStyle","margin","Config","inputList","setInputList","useSelector","state","prev","checked","onClick","setGraphInfo","setFromVertex","setToVertex","build","run","window","open","cursor","alt","src","Aside","Header","Node","size","onPointerDown","onPointerUp","onPointerMove","fromOrTo","color","y","ref","useRef","textRef","current","cy","cx","r","fill","stroke","strokeWidth","onMouseOver","currentTarget","setAttribute","onMouseOut","dy","textAnchor","React","memo","next","isDraged","dragActive","Edge","direct","fromY","fromX","toY","toX","maxY","max","maxX","minY","min","minX","gap","calculCostCoord","costY","costX","viewBox","refX","refY","markerWidth","markerHeight","orient","d","markerEnd","dx","Point","CoordCalculator","leftTop","rightBottom","nodeCoord","getLeftTop","getRightBottom","BinarySpacePartitioning","extractNodeCoordList","extractVertex","depth","randomY","random","randomX","axis","ratio","cnt","idx","init","connectedList","coord","vertexList","key","shift","connect","vele","CoordCalculatorBuilder","pt","BOARDSIZE","outofRange","Main","setSize","vertexInfo","setVertexInfo","currentNode","setdragActive","off","setOff","shortestPath","shallowEqual","offsetWidth","offsetHeight","coordCalculator","setLeftTop","setRightBottom","handlePointerDown","box","getBoundingClientRect","offX","clientX","left","offY","clientY","top","setPointerCapture","pointerId","handlePointerUp","nodeList","map","vertex","fromTo","data","preventDefault","xx","movementX","yy","movementY","toff","moveY","moveX","handlePointerMove","edgeList","idx1","self","p1","connectedVertex","idx2","p2","listShortestPath","indexOfCurrentVertex","indexOf","indexOfNextVertex","abs","isShortestEdge","App","combineReducers","action","store","createStore","rootReducer","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5fc396a.chunk.js","sourcesContent":["import { Graph } from '../redux/graph';\r\n\r\ninterface EdgeInfo {\r\n  [key: string]: string[][];\r\n};\r\n\r\nexport const inputValueParsing = (value: string): Graph | undefined => {\r\n  const inputValue: string[] = value.split('\\n');\r\n  const [vertexCount, edgecnt]: string[] = inputValue[0].split(\" \");\r\n\r\n  if (isNaN(Number(vertexCount)) === true && isNaN(Number(edgecnt)) === true) {\r\n    return undefined;\r\n  }\r\n\r\n  const graph = makeGraph(inputValue.splice(1));\r\n\r\n  return {\r\n    vertexCount: vertexCount,\r\n    edgeCount: edgecnt,\r\n    graph: graph\r\n  };\r\n}\r\n\r\nconst makeGraph = (graph: string[]) => {\r\n  return graph.reduce((acc: EdgeInfo, ele): EdgeInfo => {\r\n    const [vertex1, vertex2, cost] = ele.split(' ');\r\n\r\n    if(vertex1 === '')\r\n      return acc;\r\n\r\n    acc[vertex1] = acc[vertex1] || [];\r\n\r\n    if (vertex2 === undefined && cost === undefined) \r\n      return acc;\r\n\r\n    if (vertex2 === '')\r\n      return acc;\r\n    \r\n    acc[vertex1].push([vertex2, cost]);\r\n\r\n    return acc;\r\n  }, {});\r\n}\r\n","export const SETSHORTESTPATH = 'SETSHORTESTPATH' as const;\r\n\r\nexport interface ShortestPathState {\r\n  from : string;\r\n  to: string;\r\n  path: { [key: string]: boolean };\r\n}\r\n\r\ninterface Action {\r\n  type: string;\r\n  payload: ShortestPathState;\r\n}\r\n\r\nexport const initialState: ShortestPathState = {\r\n  from: '',\r\n  to: '',\r\n  path: {}\r\n};\r\n\r\n// action creator\r\nexport const setShortestPath = (diff: ShortestPathState) => ({\r\n  type: SETSHORTESTPATH,\r\n  payload: diff\r\n});\r\n\r\n// 리듀서\r\nexport default function shortestPathReducer(state: ShortestPathState = initialState, action: Action): ShortestPathState {\r\n  switch (action.type) {\r\n    case SETSHORTESTPATH:\r\n      return {\r\n        ...state,\r\n        from : action.payload.from,\r\n        to : action.payload.to,\r\n        path: action.payload.path\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","export const SETGRAPHINFO = 'SETGRAPHINFO' as const;\r\n\r\nexport interface Graph {\r\n  vertexCount: string;\r\n  edgeCount: string;\r\n  graph: { [key: string]: string[][] };\r\n}\r\n\r\nexport interface GraphState {\r\n  graph: Graph;\r\n};\r\n\r\ninterface Action {\r\n  type: string;\r\n  payload: Graph;\r\n}\r\n\r\nconst initialState: GraphState = {\r\n  graph: {\r\n    vertexCount: '0',\r\n    edgeCount: '',\r\n    graph: {}\r\n  }\r\n};\r\n\r\n// action creator\r\nexport const setGraphInfo = (diff: Graph) => ({\r\n  type: SETGRAPHINFO,\r\n  payload: diff\r\n});\r\n\r\n// 리듀서\r\nexport default function graphReducer(state: GraphState = initialState, action: Action): GraphState {\r\n  switch (action.type) {\r\n    case SETGRAPHINFO:\r\n      return {\r\n        ...state,\r\n        graph: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, { useCallback, useMemo, useEffect, useState } from \"react\";\r\nimport { inputValueParsing } from '../../modules/MakeGraph';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setShortestPath, initialState } from '../../redux/shortestpath';\r\nimport { setGraphInfo, Graph } from '../../redux/graph';\r\nimport { debounce } from \"lodash\";\r\n\r\nexport default function TextArea(): JSX.Element {\r\n  const dispatch = useDispatch();\r\n  const [value, setValue] = useState<string>('6\\n1 2 2\\n2 3 8\\n3 4 1\\n1 4 9\\n4 5 7\\n5 6 2\\n4 6 6\\n3 6 9');\r\n\r\n  const debounceSetGraph = useMemo(() => debounce((arg) => {\r\n    const ng: Graph | undefined = inputValueParsing(arg);\r\n    if (ng !== undefined) {\r\n      dispatch(setGraphInfo(ng as Graph));\r\n      dispatch(setShortestPath(initialState));\r\n    }\r\n  }, 550), [dispatch]);\r\n\r\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setValue(e.target.value);\r\n    debounceSetGraph(e.target.value);\r\n  }, [debounceSetGraph]);\r\n\r\n  useEffect(() => {\r\n    debounceSetGraph(value);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <textarea\r\n        style={{ resize: 'none' }}\r\n        value={value}\r\n        onChange={handleChange}\r\n        id='input'\r\n      />\r\n      <label htmlFor='input'/>\r\n    </>\r\n  )\r\n}","import React from \"react\";\r\n\r\ninterface ToggleProps {\r\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\r\n}\r\n\r\nconst Toggle = ({ onChange }: ToggleProps) => {\r\n\r\n  return (\r\n    <>\r\n      <label className='direct-button' htmlFor='direction'>\r\n        <input type='checkbox' onChange={onChange} id='direction' />\r\n        <span className='onoff-switch' />\r\n      </label>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Toggle;","interface InputProps {\r\n  text: string;\r\n  name: string;\r\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\r\n  value: string;\r\n  width?: string;\r\n}\r\n\r\nconst Input = ({ text, name, onChange, value }: InputProps) => {\r\n\r\n  return (\r\n    <>\r\n      <label style={{ fontSize: '13px' }}\r\n        htmlFor={text}\r\n      >\r\n        {text}\r\n      </label>\r\n      <input\r\n        type='text'\r\n        name={name}\r\n        onChange={onChange}\r\n        value={value}\r\n        id={text}\r\n        style={{ width: '40px', height: '25px' }}>\r\n      </input>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Input;","export const SETDIRECT = 'SETDIRECT' as const;\r\n\r\nexport interface DirectState {\r\n  directed: boolean;\r\n}\r\n\r\ninterface Action {\r\n  type: string;\r\n  payload: boolean;\r\n}\r\n\r\nconst initialState: DirectState = {\r\n  directed: false\r\n};\r\n\r\nexport const setDirected = (diff: boolean) => ({\r\n  type: SETDIRECT,\r\n  payload: diff\r\n});\r\n\r\n// 리듀서\r\nexport default function directReducer(state: DirectState = initialState, action: Action): DirectState {\r\n  switch (action.type) {\r\n    case SETDIRECT:\r\n      return {\r\n        ...state,\r\n        directed : action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { Graph } from '../redux/graph';\r\nimport PriorityQueue from 'ts-priority-queue';\r\n\r\ninterface EdgeInfo {\r\n  [key: string]: { [key: string]: string };\r\n}\r\n\r\ntype Pair = [number, string];\r\n\r\nconst INF = Math.floor(Number.MAX_SAFE_INTEGER / 987);\r\n\r\nexport class Dijkstra {\r\n\r\n  private initGraph: Graph;\r\n  private from: string;\r\n  private to: string;\r\n  private graph: EdgeInfo = {};\r\n  private vertexCount: number = 0;\r\n\r\n  constructor(builder: DijkstraBuilder) {\r\n\r\n    this.initGraph = builder.getGraphInfo();\r\n    this.from = builder.getFromVertex();\r\n    this.to = builder.getToVertex();\r\n    this.vertexCount = Number(this.initGraph.vertexCount);\r\n  }\r\n\r\n  public run() {\r\n\r\n    this.mapping();\r\n\r\n    if (this.isExistVertex() === false)\r\n      return false;\r\n\r\n    return this.backtracking(this.dijkstra());\r\n  }\r\n\r\n  public mapping() {\r\n\r\n    Object.entries(this.initGraph.graph).forEach(ele => {\r\n\r\n      const [currentVertex, value] = ele;\r\n\r\n      if (this.isExceedVertexCount(this.graph) && value.length <= 0)\r\n        return;\r\n\r\n      this.graph[currentVertex] = this.graph[currentVertex] || {};\r\n\r\n      value.forEach(ele2 => {\r\n\r\n        const [nextVertex, cost] = ele2;\r\n        if (nextVertex === undefined && cost === undefined)\r\n          return;\r\n\r\n        if (this.isExceedVertexCount(this.graph) && !this.graph[nextVertex])\r\n          return;\r\n\r\n        this.graph[nextVertex] = this.graph[nextVertex] || {};\r\n\r\n        // 현재 정점과 연결된 정점 객체가 존재하지 않는다면\r\n        if (Object.keys(this.graph[currentVertex]).includes(nextVertex) === false) {\r\n          this.graph[currentVertex][nextVertex] = cost;\r\n        }\r\n        // 양방향으로 연결한다.\r\n        if (Object.keys(this.graph[nextVertex]).includes(currentVertex) === false) {\r\n          this.graph[nextVertex][currentVertex] = cost;\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  public dijkstra() {\r\n\r\n    const dist: { [key: string]: number } = {};\r\n    const path: { [key: string]: string } = {};\r\n\r\n    Object.keys(this.graph).forEach(ele => {\r\n      dist[ele] = dist[ele] || INF\r\n      path[ele] = path[ele] || ele;\r\n    });\r\n\r\n    dist[this.from] = 0;\r\n\r\n    const pq = new PriorityQueue({ comparator: (a: Pair, b: Pair) => a[0] - b[0] });\r\n    pq.queue([0, this.from]);\r\n\r\n    while (pq.length) {\r\n\r\n      const [cost, curVertex] = pq.peek();\r\n      pq.dequeue();\r\n\r\n      if (dist[curVertex] < cost)\r\n        continue;\r\n\r\n      Object.entries(this.graph[curVertex]).forEach(ele => {\r\n\r\n        const [nextVertex, tmpcost] = ele;\r\n        const nextCost = Number(tmpcost) + cost;\r\n\r\n        if (nextCost < dist[nextVertex]) {\r\n          path[nextVertex] = curVertex;\r\n          dist[nextVertex] = nextCost;\r\n          pq.queue([nextCost, nextVertex]);\r\n        }\r\n      });\r\n    }\r\n    return path;\r\n  }\r\n\r\n  // 최단경로 역추적\r\n  public backtracking(path: { [key: string]: string }) {\r\n\r\n    const ret: { [key: string]: boolean } = {};\r\n    let x = this.to;\r\n\r\n    while (x !== path[x]) {\r\n      ret[x] = ret[x] || false;\r\n      x = path[x];\r\n    }\r\n\r\n    ret[x] = ret[x] || false;\r\n    ret[this.to] = true;\r\n    ret[this.from] = true;\r\n    \r\n    return ret;\r\n  }\r\n\r\n  // from to 정점이 하나라도 없다면\r\n  public isExistVertex() {\r\n    return Object.keys(this.graph).includes(this.from) && Object.keys(this.graph).includes(this.to);\r\n  }\r\n\r\n  // 객체 키값 개수가 정점 개수를 초과하는가?\r\n  public isExceedVertexCount(edg: EdgeInfo) {\r\n    return Object.keys(this.graph).length >= this.vertexCount;\r\n  }\r\n}\r\n\r\n\r\nexport class DijkstraBuilder {\r\n\r\n  private graphInfo: Graph;\r\n  private from: string;\r\n  private to: string;\r\n\r\n  public setGraphInfo(graphInfo: Graph) {\r\n    this.graphInfo = graphInfo;\r\n    return this;\r\n  }\r\n\r\n  public setFromVertex(from: string) {\r\n    this.from = from;\r\n    return this;\r\n  }\r\n\r\n  public setToVertex(to: string) {\r\n    this.to = to;\r\n    return this;\r\n  }\r\n\r\n  public getGraphInfo() {\r\n    return this.graphInfo;\r\n  }\r\n\r\n  public getFromVertex() {\r\n    return this.from;\r\n  }\r\n\r\n  public getToVertex() {\r\n    return this.to;\r\n  }\r\n\r\n  public build() {\r\n    return new Dijkstra(this);\r\n  }\r\n}","import Toggle from '../atoms/Toggle';\r\nimport Input from '../atoms/Input';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setDirected } from '../../redux/direct';\r\nimport { setShortestPath } from '../../redux/shortestpath';\r\nimport React, { useState } from 'react';\r\nimport { Dijkstra, DijkstraBuilder } from '../../modules/Dijkstra';\r\nimport { RootState } from '../../redux/index';\r\n\r\nconst LabelStyle = {\r\n  margin: '12px',\r\n  fontSize: '15px',\r\n}\r\n\r\ntype changeEventInput = React.ChangeEvent<HTMLInputElement>;\r\n\r\ninterface InputList {\r\n  from: string;\r\n  to: string;\r\n};\r\n\r\nconst Config = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const [inputList, setInputList] = useState<InputList>({\r\n    from: '',\r\n    to: '',\r\n  });\r\n  const { graphInfo } = useSelector((state: RootState) => ({\r\n    graphInfo: state.graph.graph\r\n  }));\r\n\r\n  const toggleOnChange = (e: changeEventInput) => dispatch(setDirected(e.target.checked));\r\n\r\n  const run = () => {\r\n\r\n    const dijkstra: Dijkstra = new DijkstraBuilder()\r\n      .setGraphInfo(graphInfo)\r\n      .setFromVertex(inputList.from)\r\n      .setToVertex(inputList.to)\r\n      .build();\r\n\r\n    const ret = dijkstra.run();\r\n\r\n    if (ret !== false) {\r\n      dispatch(setShortestPath({\r\n        from: inputList.from,\r\n        to: inputList.to,\r\n        path: ret\r\n      }));\r\n    }\r\n  }\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n    const { name, value } = e.target;\r\n\r\n    if (name === 'path-from') {\r\n      setInputList(prev => ({\r\n        ...prev,\r\n        from: value,\r\n      }))\r\n\r\n    } else {\r\n      setInputList(prev => ({\r\n        ...prev,\r\n        to: value,\r\n      }))\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className='config'>\r\n        <label style={LabelStyle}>Undirected : Directed</label>\r\n        <Toggle onChange={toggleOnChange} />\r\n        <label style={LabelStyle}>Shortest Path Find</label>\r\n        <div>\r\n          <Input text='from' name='path-from' onChange={onChange} value={inputList.from} />\r\n          <Input text='to' name='path-to' onChange={onChange} value={inputList.to} />\r\n        </div>\r\n        <button onClick={run}>Find</button>\r\n        <img\r\n          onClick={() => window.open('https://github.com/dkpark10/graphpainter', '_blank')}\r\n          style={{ width: '45px', height: '45px', cursor: 'pointer' }}\r\n          alt='my github'\r\n          src='https://media.cdnandroid.com/item_images/1097581/imagen-github-0thumb.jpeg'>\r\n        </img>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Config;\r\n","import React from \"react\";\r\nimport Textarea from '../atoms/TextArea';\r\nimport Config from '../molecules/Config';\r\n\r\nexport default function Aside() {\r\n\r\n  return (\r\n    <aside>\r\n      <Textarea />\r\n      <Config />\r\n    </aside>\r\n  )\r\n}","const Header = () => {\r\n\r\n  const title = \"Graph Painter\";\r\n  \r\n  return (\r\n    <header>\r\n      <h1>{title}</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React, { useEffect, useRef } from 'react';\r\nimport { IDragNode } from '../molecules/Main';\r\n\r\ninterface Props {\r\n  size: { y: number, x: number },\r\n  value: string,\r\n  onPointerDown: React.PointerEventHandler<SVGCircleElement>,\r\n  onPointerUp: React.PointerEventHandler<SVGCircleElement>,\r\n  onPointerMove: React.PointerEventHandler<SVGCircleElement>,\r\n  isDraged: IDragNode;\r\n  fromOrTo: boolean;\r\n  color?: string\r\n};\r\n\r\nconst Node = ({\r\n  size,\r\n  value,\r\n  onPointerDown,\r\n  onPointerUp,\r\n  onPointerMove,\r\n  fromOrTo,\r\n  color = '#cfcfcf' }: Props) => {\r\n  const { y, x } = size;\r\n  const ref = useRef<any>(null);\r\n  const textRef = useRef<any>(null);\r\n\r\n  useEffect(() => {\r\n    return (() => {\r\n      ref.current = null;\r\n      textRef.current = null;\r\n    })\r\n  }, []);\r\n\r\n  const onNodeMouseOver = (e: React.PointerEvent<SVGCircleElement>) => {\r\n    if (fromOrTo === true) {\r\n      return;\r\n    }\r\n    e.currentTarget.setAttribute('fill', '#ebe534');\r\n    textRef.current.setAttribute('fill', 'black');\r\n  }\r\n\r\n  const onNodeMouseOut = (e: React.PointerEvent<SVGCircleElement>) => {\r\n    if (fromOrTo === true) {\r\n      return;\r\n    }\r\n    e.currentTarget.setAttribute('fill', '#16afc0');\r\n    textRef.current.setAttribute('fill', 'white');\r\n  }\r\n\r\n  return (\r\n    <g\r\n      style={{ cursor: 'pointer' }}\r\n    >\r\n      <circle\r\n        ref={ref}\r\n        cy={x}\r\n        cx={y}\r\n        r='22'\r\n        fill={fromOrTo === true ? '#ebe534' : '#16afc0'}\r\n        stroke={color}\r\n        strokeWidth='2.5'\r\n        onPointerDown={onPointerDown}\r\n        onPointerUp={onPointerUp}\r\n        onPointerMove={onPointerMove}\r\n        onMouseOver={onNodeMouseOver}\r\n        onMouseOut={onNodeMouseOut}\r\n      />\r\n      <text\r\n        ref={textRef}\r\n        y={x}\r\n        x={y}\r\n        dy='.35em'\r\n        fontSize=\"15\"\r\n        fill={fromOrTo ? 'black' : 'white'}\r\n        textAnchor='middle'\r\n      >\r\n        {value}\r\n      </text>\r\n    </g>\r\n  )\r\n};\r\n\r\nexport default React.memo(Node, (prev, next) => {\r\n  return prev.isDraged.dragActive === next.isDraged.dragActive &&\r\n    prev.size.y === next.size.y &&\r\n    prev.size.x === next.size.x &&\r\n    prev.fromOrTo === next.fromOrTo;\r\n});","import { useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/index';\r\n\r\ninterface EdgeProp {\r\n  from: number[];\r\n  to: number[];\r\n  cost: string;\r\n  color? : string;\r\n};\r\n\r\nconst calculCostCoord = (from: number[], to: number[]) => {\r\n\r\n  const maxY = Math.max(from[0], to[0]);\r\n  const maxX = Math.max(from[1], to[1]);\r\n  const minY = Math.min(from[0], to[0]);\r\n  const minX = Math.min(from[1], to[1]);\r\n\r\n  // cost 위치 미세조정\r\n  let gap = 0;\r\n  if (to[0] > from[0] && to[1] > from[1])\r\n    gap += 15;\r\n  else if (to[0] < from[0] && to[1] < from[1])\r\n    gap += 12;\r\n\r\n  return [((maxY - minY) / 2) + minY - gap, ((maxX - minX) / 2) + minX + gap];\r\n}\r\n\r\nconst Edge = ({ from, to, cost, color = '#cfcfcf'}: EdgeProp) => {\r\n\r\n  const direct = useSelector((state: RootState) => state.direct.directed);\r\n  const [fromY, fromX] = from;\r\n  const [toY, toX] = to;\r\n  const [costY, costX] = calculCostCoord(from, to);\r\n\r\n  return (\r\n    <>\r\n      <g>\r\n        <defs>\r\n          <marker\r\n            id=\"arrow\"\r\n            viewBox=\"0 0 10 10\"\r\n            refX=\"24\"\r\n            refY=\"5\"\r\n            markerWidth=\"8\"\r\n            markerHeight=\"8\"\r\n            orient=\"auto-start-reverse\">\r\n            <path d=\"M 0 0 L 10 5 L 0 10 z\" fill='#cfcfcf' />\r\n          </marker>\r\n        </defs>\r\n        <path d={`M ${fromY} ${fromX} L ${toY} ${toX}`}\r\n          strokeWidth=\"2\"\r\n          stroke={color}\r\n          markerEnd={direct === true ? \"url(#arrow)\" : \"\"}\r\n        />\r\n        <text y={costX}\r\n          x={costY}\r\n          dx='.3em'\r\n          dy='.9em'\r\n          fontSize=\"14\"\r\n          fill={color}\r\n          textAnchor='right'>{cost}</text>\r\n      </g>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Edge;","import { Graph } from '../redux/graph';\r\n\r\nexport interface Vertex {\r\n  connectedList: string[][];\r\n  coord: Point;\r\n}\r\n\r\nexport class Point {\r\n\r\n  public readonly y: number;\r\n  public readonly x: number;\r\n\r\n  constructor(y: number, x: number) {\r\n    this.y = y;\r\n    this.x = x;\r\n  }\r\n}\r\n\r\nexport class CoordCalculator {\r\n\r\n  private graphInfo: Graph;\r\n  private vertexCount: number = 0;\r\n  private leftTop: Point;\r\n  private rightBottom: Point;\r\n  private nodeCoord: Point[] = [];\r\n\r\n  constructor(builder: CoordCalculatorBuilder) {\r\n\r\n    this.graphInfo = builder.getGraphInfo();\r\n    this.leftTop = builder.getLeftTop();\r\n    this.rightBottom = builder.getRightBottom();\r\n    this.vertexCount = Number(this.graphInfo.vertexCount);\r\n  }\r\n\r\n  // 1. 이진분할로 좌표 배치 셋팅\r\n  // 2. 노드갯수만큼 추출\r\n\r\n  public run() {\r\n\r\n    this.BinarySpacePartitioning({ ...this.leftTop }, { ...this.rightBottom }, 0);\r\n    this.extractNodeCoordList();\r\n\r\n    // return this.setVertexInfo(this.extractVertex());\r\n    return this.extractVertex();\r\n  }\r\n\r\n  public BinarySpacePartitioning(leftTop: Point, rightBottom: Point, depth: number) {\r\n\r\n    if (2 ** depth >= this.vertexCount) {\r\n\r\n      const randomY = Math.floor(Math.random() * (rightBottom.y - leftTop.y) + leftTop.y);\r\n      const randomX = Math.floor(Math.random() * (rightBottom.x - leftTop.x) + leftTop.x);\r\n\r\n      this.nodeCoord.push(new Point(randomY, randomX));\r\n\r\n      return;\r\n    }\r\n\r\n    const axis = Math.floor(Math.floor(Math.random() * 2));\r\n    const ratio = Math.floor((Math.random() * (6 - 3)) + 4);\r\n\r\n    // 가로로 나눔\r\n    if (axis === 0) {\r\n\r\n      const height = (((rightBottom.y - leftTop.y) * ratio) / 10) + leftTop.y;\r\n      this.BinarySpacePartitioning({ ...leftTop }, new Point(height, rightBottom.x), depth + 1);\r\n      this.BinarySpacePartitioning(new Point(height + 1, leftTop.x), { ...rightBottom }, depth + 1);\r\n    }\r\n    // 세로로 나눔\r\n    else {\r\n      const width = (((rightBottom.x - leftTop.x) * ratio) / 10) + leftTop.x;\r\n      this.BinarySpacePartitioning({ ...leftTop }, new Point(rightBottom.y, width), depth + 1);\r\n      this.BinarySpacePartitioning(new Point(leftTop.y, width + 1), { ...rightBottom }, depth + 1);\r\n    }\r\n  }\r\n\r\n  // 랜덤한 노드 좌표 중 노드갯수만큼 뽑아낸다.\r\n  public extractNodeCoordList() {\r\n\r\n    let cnt = this.nodeCoord.length - this.vertexCount;\r\n\r\n    while (cnt) {\r\n      const length = this.nodeCoord.length;\r\n      const idx = Math.floor(Math.random() * length);\r\n      this.nodeCoord.splice(idx, 1);\r\n      cnt--;\r\n    }\r\n  }\r\n\r\n  // 정점만 추출해낸다.\r\n  public extractVertex(init = { connectedList: [], coord: undefined }) {\r\n\r\n    const vertexList: { [key: string]: Vertex } = {};\r\n\r\n    Object.entries(this.graphInfo.graph).forEach((ele, idx) => {\r\n\r\n      const [key, value] = ele;\r\n\r\n      // 정점 객수를 넘어가면 리턴\r\n      if (Object.keys(vertexList).length >= this.vertexCount\r\n        && Object.keys(vertexList).includes(key) === false)\r\n        return;\r\n\r\n      vertexList[key] = vertexList[key] || { ...init };\r\n      if (!vertexList[key].coord) {\r\n        vertexList[key].coord = this.nodeCoord[0];\r\n        this.nodeCoord.shift();\r\n      }\r\n\r\n      vertexList[key].connectedList = this.connect(vertexList, value);\r\n    })\r\n\r\n    return vertexList;\r\n  }\r\n\r\n  public connect(vertexList: { [key: string]: Vertex }, connectedList: string[][]) {\r\n\r\n    const ret: string[][] = [];\r\n    connectedList.forEach(vele => {\r\n\r\n      if (vele[0] === '' || vele[0] === undefined)\r\n        return;\r\n\r\n      // 키값 개수는 정점갯수를 넘고 새로운 정점키값일 경우 리턴\r\n      if (Object.keys(vertexList).length >= this.vertexCount\r\n      && vertexList[vele[0]] === undefined )\r\n        return;\r\n\r\n      ret.push(vele);\r\n      vertexList[vele[0]] = vertexList[vele[0]] || { connectedList: [], coord: undefined };\r\n\r\n      if (!vertexList[vele[0]].coord) {\r\n        vertexList[vele[0]].coord = this.nodeCoord[0];\r\n        this.nodeCoord.shift();\r\n      }\r\n    })\r\n\r\n    return ret;\r\n  }\r\n}\r\n\r\nexport class CoordCalculatorBuilder {\r\n\r\n  private graphInfo: Graph;\r\n  private leftTop: Point;\r\n  private rightBottom: Point;\r\n\r\n  public setGraphInfo(graphInfo: Graph) {\r\n    this.graphInfo = graphInfo;\r\n    return this;\r\n  }\r\n\r\n  public setLeftTop(pt: Point) {\r\n    this.leftTop = pt;\r\n    return this;\r\n  }\r\n\r\n  public setRightBottom(pt: Point) {\r\n    this.rightBottom = pt;\r\n    return this;\r\n  }\r\n\r\n  public getGraphInfo() {\r\n    return this.graphInfo;\r\n  }\r\n\r\n  public getLeftTop() {\r\n    return this.leftTop;\r\n  }\r\n\r\n  public getRightBottom() {\r\n    return this.rightBottom;\r\n  }\r\n\r\n  public build() {\r\n    return new CoordCalculator(this);\r\n  }\r\n}","import React, { useRef, useEffect, useState } from 'react';\r\nimport Node from '../atoms/Node';\r\nimport Edge from '../atoms/Edge';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport { RootState } from '../../redux/index';\r\nimport { CoordCalculator, Point, CoordCalculatorBuilder, Vertex } from '../../modules/CoordCalculator';\r\n\r\nconst BOARDSIZE = 20 as const;\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst isShortestEdge = (\r\n  shortestPath: { [key: string]: boolean },\r\n  vertex: string,\r\n  nextVertex: string): boolean => {\r\n\r\n  const listShortestPath = Object.keys(shortestPath);\r\n  const vertexCount = listShortestPath.length;\r\n\r\n  if (vertexCount === 0) {\r\n    return false;\r\n  }\r\n\r\n  const indexOfCurrentVertex = listShortestPath.indexOf(vertex);\r\n  const indexOfNextVertex = listShortestPath.indexOf(nextVertex);\r\n\r\n  if (indexOfCurrentVertex === -1 || indexOfNextVertex === -1) {\r\n    return false;\r\n  }\r\n\r\n  return Math.abs(indexOfCurrentVertex - indexOfNextVertex) <= 1 ? true : false;\r\n}\r\n\r\nconst outofRange = (value: number, size: Size): number => {\r\n\r\n  if (value <= BOARDSIZE)\r\n    value = BOARDSIZE * 2;\r\n  if (value >= size.height - BOARDSIZE)\r\n    value = size.height - BOARDSIZE * 2;\r\n\r\n  return value;\r\n}\r\n\r\nexport interface IDragNode {\r\n  dragActive: boolean;\r\n  currentNode: any;\r\n};\r\n\r\nexport default function Main(): JSX.Element {\r\n  const ref = useRef<any>(null);\r\n  const [size, setSize] = useState<Size>({ width: 0, height: 0 });\r\n  const [vertexInfo, setVertexInfo] = useState<{ [key: string]: Vertex }>({});\r\n  const [dragActive, setdragActive] = useState<IDragNode>({ dragActive: false, currentNode: null });\r\n  const [off, setOff] = useState<number[]>([0, 0]);\r\n\r\n  const { graphInfo, shortestPath } = useSelector((state: RootState) => ({\r\n    graphInfo: state.graph.graph,\r\n    shortestPath: state.path\r\n  }), shallowEqual);\r\n\r\n  useEffect(() => {\r\n    setSize(prev => ({\r\n      ...prev,\r\n      width: ref.current.offsetWidth,\r\n      height: ref.current.offsetHeight\r\n    }))\r\n\r\n    const coordCalculator: CoordCalculator = new CoordCalculatorBuilder()\r\n      .setGraphInfo(graphInfo)\r\n      .setLeftTop(new Point(0 + BOARDSIZE * 2, 0 + BOARDSIZE * 2))\r\n      .setRightBottom(new Point(size.width - BOARDSIZE * 2, size.height - BOARDSIZE * 2))\r\n      .build();\r\n\r\n    setVertexInfo(prev => ({ ...coordCalculator.run() }));\r\n\r\n  }, [ref, graphInfo, size.width, size.height]);\r\n\r\n  const handlePointerDown = (e: React.PointerEvent<SVGCircleElement>) => {\r\n\r\n    const box = e.currentTarget.getBoundingClientRect();\r\n    const offX = e.clientX - box.left;\r\n    const offY = e.clientY - box.top;\r\n    e.currentTarget.setPointerCapture(e.pointerId);\r\n\r\n    setOff(prev => [offX, offY]);\r\n    setdragActive(prev => ({\r\n      ...prev,\r\n      dragActive: true,\r\n      currentNode: e.currentTarget\r\n    }));\r\n  }\r\n\r\n  const handlePointerUp = () => {\r\n    setdragActive(prev => ({\r\n      ...prev,\r\n      dragActive: false,\r\n      currentNode: null\r\n    }));\r\n  }\r\n\r\n  const handlePointerMove = ((e: React.PointerEvent<SVGCircleElement>, data: [string, Vertex]) => {\r\n    e.preventDefault();\r\n    const [vertex, value] = data;\r\n\r\n    const xx = e.movementX + off[1];\r\n    const yy = e.movementY + off[0];\r\n\r\n    if (dragActive.dragActive) {\r\n\r\n      const toff = [...off];\r\n      const moveY = outofRange(value.coord.y - (toff[1] - xx), size);\r\n      const moveX = outofRange(value.coord.x - (toff[0] - yy), size);\r\n\r\n      setVertexInfo(prev => ({\r\n        ...prev,\r\n        [vertex]: {\r\n          ...vertexInfo[vertex],\r\n          coord: new Point(moveY, moveX)\r\n        }\r\n      }))\r\n    }\r\n  });\r\n\r\n  const nodeList: JSX.Element[] = Object.entries(vertexInfo).map((ele, idx) => {\r\n    const [vertex, value] = ele;\r\n    const fromTo = shortestPath.from === vertex || shortestPath.to === vertex;\r\n\r\n    return (\r\n      <Node\r\n        key={idx}\r\n        size={{\r\n          y: value.coord.y,\r\n          x: value.coord.x\r\n        }}\r\n        value={vertex}\r\n        onPointerMove={(e: React.PointerEvent<SVGCircleElement>) => handlePointerMove(e, ele)}\r\n        onPointerDown={handlePointerDown}\r\n        onPointerUp={handlePointerUp}\r\n        isDraged={dragActive}\r\n        fromOrTo={fromTo}\r\n      />\r\n    )\r\n  })\r\n\r\n  const edgeList: JSX.Element[][] = Object.entries(vertexInfo).map((ele, idx1, self) => {\r\n    const [vertex, value] = ele;\r\n    const p1: Point = value.coord;\r\n\r\n    return value.connectedList.map((connectedVertex, idx2) => {\r\n      const [nextVertex, cost] = connectedVertex;\r\n      const p2: Point = vertexInfo[nextVertex].coord;\r\n      const color = isShortestEdge(shortestPath.path, vertex, nextVertex) ? '#ebe534' : undefined;\r\n\r\n      return (\r\n        <Edge\r\n          key={idx1 * self.length + idx2}\r\n          from={[p1.y, p1.x]}\r\n          to={[p2.y, p2.x]}\r\n          cost={cost}\r\n          color={color}\r\n        />\r\n      )\r\n    })\r\n  });\r\n\r\n  return (\r\n    <main ref={ref}>\r\n      <svg\r\n        style={{ width: size.width, height: size.height }}\r\n      >\r\n        {edgeList}\r\n        {nodeList}\r\n      </svg>\r\n    </main>\r\n  );\r\n}","import './styles/App.css';\r\nimport Aside from './components/templates/Aside';\r\nimport Header from './components/templates/Header';\r\nimport Main from './components/molecules/Main';\r\n\r\nexport default function App(){\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className='container'>\r\n        <Aside />\r\n        <Main />\r\n      </div>\r\n    </>\r\n  )\r\n}","import { combineReducers } from 'redux';\r\nimport graphReducer, { GraphState } from './graph';\r\nimport directReducer, { DirectState } from './direct';\r\nimport shortestPathReducer, { ShortestPathState } from './shortestpath';\r\n\r\nexport interface RootState {\r\n  graph : GraphState,\r\n  direct : DirectState,\r\n  path : ShortestPathState\r\n}\r\n\r\nexport default combineReducers<RootState>({\r\n  graph: graphReducer,\r\n  direct: directReducer,\r\n  path: shortestPathReducer\r\n});\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport composeWithDevTools from 'redux-devtools-extension'; // 리덕스 개발자 도구\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport rootReducer from './redux/index';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}